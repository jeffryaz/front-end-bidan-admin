{"version":3,"sources":["app/components/tableCustomV1/tableOnly.js","app/components/buttonAction/ButtonAction.js","app/components/tableCustomV1/table.js","app/modules/ReservationPatient/ListReservationOnlinePage.js","app/modules/ReservationPatient/_redux/CrudReservationPatient.js","app/modules/ReservationPatient/ListReservationOfflinePage.js","app/modules/ReservationPatient/ListReservationCheckInPage.js","app/modules/ReservationPatient/RootReservation.js"],"names":["injectIntl","connect","props","intl","dataHeader","loading","err","children","hecto","Fragment","component","Paper","className","map","item","index","key","toString","id","title","CustomTooltip","withStyles","theme","tooltip","boxShadow","shadows","fontSize","marginTop","Tooltip","ButtonAction","data","handleAction","ops","label","exclude","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","handleClose","handleChange","useCallback","type","listUsed","placement","aria-label","aria-controls","aria-haspopup","onClick","style","margin","padding","keepMounted","onClose","PaperProps","width","marginLeft","filter","el","includes","to","url","icon","primary","disabled","handleParams","countData","numberColum","page","count","rowsPerPage","paginations","setPaginations","name","value","order","status","active","length","replace","sortData","setSortData","nameStateFilter","setNameStateFilter","filterTable","setFilterTable","sort","filterSort","setFilterSort","requestFilterSort","updateFilterTable","updateSortTable","pagination","Object","assign","filterSorts","ret","p","generateFilterUrl","params","openFilterTable","idFilter","idInputFilter","document","getElementById","getAttribute","setAttribute","classList","add","remove","useEffect","data-toggle","aria-expanded","paddingRight","paddingLeft","color","role","zIndex","min","defaultValue","placeholder","formatMessage","property","filterTables","updateValueFilter","resetValueFilter","reset","direction","sortDatas","createSortHandler","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","headerTable","data_ops","setLoading","setData","suhbeader","useSubheader","useLayoutEffect","setBreadcrumbs","pathname","setTitle","axios","get","then","result","catch","MODAL","showSnackbar","history","push","TableRow","TableCell","kode_pasien","code_reg","nama","tgl_book","poli","setParamsTable","setErr","exact","from","path"],"mappings":"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","file":"static/js/6.3477e0bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\n\r\nconst TableOnly = (props) => {\r\n  const {\r\n    intl,\r\n    dataHeader = [],\r\n    loading = false,\r\n    err = false,\r\n    children,\r\n    hecto = 1,\r\n  } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <TableContainer component={Paper}>\r\n          <Table className={\"hecto-\" + hecto}>\r\n            <TableHead>\r\n              <TableRow>\r\n                {dataHeader.map((item, index) => {\r\n                  return (\r\n                    <TableCell\r\n                      className=\"bg-primary text-uppercase\"\r\n                      key={index.toString()}\r\n                    >\r\n                      <span>\r\n                        <FormattedMessage id={item.title} />\r\n                      </span>\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>{children}</TableBody>\r\n          </Table>\r\n\r\n          <div className=\"table-loading-data\">\r\n            <div className=\"text-center font-weight-bold py-5\">\r\n              <div className=\"table-loading-data-potition\">\r\n                {loading && (\r\n                  <span>\r\n                    <i className=\"fas fa-spinner fa-pulse text-dark mr-1\"></i>\r\n                    <FormattedMessage id=\"LABEL.TABLE.WAITING_DATA\" />\r\n                  </span>\r\n                )}\r\n                {err && (\r\n                  <span className=\"text-danger\">\r\n                    <i className=\"far fa-frown text-danger mr-1\"></i>\r\n                    <FormattedMessage id=\"LABEL.ERROR_REQUEST\" />\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TableContainer>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default injectIntl(connect(null, null)(TableOnly));\r\n","import React from \"react\";\r\nimport {\r\n  IconButton,\r\n  Tooltip,\r\n  withStyles,\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { MoreVert } from \"@material-ui/icons\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CustomTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: \"0.875rem\",\r\n    marginTop: \"0.25rem\",\r\n  },\r\n}))(Tooltip);\r\n\r\nexport default function ButtonAction({\r\n  data,\r\n  handleAction,\r\n  ops,\r\n  label = null,\r\n  exclude = [],\r\n}) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n  const handleChange = React.useCallback(\r\n    (type, data) => {\r\n      if (typeof handleAction === \"function\") handleAction(type, data);\r\n      handleClose();\r\n    },\r\n    [handleAction, handleClose]\r\n  );\r\n\r\n  const listUsed = ops;\r\n\r\n  return (\r\n    <div>\r\n      {label ? (\r\n        <CustomTooltip\r\n          title={<FormattedMessage id={label} />}\r\n          placement=\"bottom\"\r\n        >\r\n          <IconButton\r\n            aria-label=\"More\"\r\n            aria-controls=\"long-menu\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleClick}\r\n          >\r\n            <MoreVert />\r\n          </IconButton>\r\n        </CustomTooltip>\r\n      ) : (\r\n        <IconButton\r\n          aria-label=\"More\"\r\n          aria-controls=\"long-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n          style={{\r\n            margin: \"-6px 0px\",\r\n            padding: 8,\r\n          }}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      )}\r\n      <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          style: {\r\n            width: 300,\r\n            marginLeft: -50,\r\n          },\r\n        }}\r\n      >\r\n        {listUsed\r\n          .filter((el) => !exclude.includes(el.type))\r\n          .map((el, id) => {\r\n            if (el.to) {\r\n              return (\r\n                <Link key={id} to={el.to?.url} style={el.to?.style}>\r\n                  <MenuItem>\r\n                    <ListItemIcon>\r\n                      <i className={el.icon}></i>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={<FormattedMessage id={el.label} />}\r\n                    />\r\n                  </MenuItem>\r\n                </Link>\r\n              );\r\n            } else {\r\n              return (\r\n                <MenuItem\r\n                  key={id}\r\n                  onClick={() => handleChange(el.type, data)}\r\n                  disabled={el.disabled}\r\n                >\r\n                  <ListItemIcon>\r\n                    <i className={el.icon}></i>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={<FormattedMessage id={el.label} />} />\r\n                </MenuItem>\r\n              );\r\n            }\r\n          })}\r\n      </Menu>\r\n    </div>\r\n    // </LightTooltip>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\n\r\nconst Tables = (props) => {\r\n  const {\r\n    intl,\r\n    dataHeader = [],\r\n    handleParams,\r\n    loading = false,\r\n    err = false,\r\n    children,\r\n    countData = 0,\r\n    hecto = 1,\r\n  } = props;\r\n  const [paginations, setPaginations] = React.useState({\r\n    numberColum: 0,\r\n    page: 0,\r\n    count: countData,\r\n    rowsPerPage: 10,\r\n  });\r\n  const [sortData, setSortData] = React.useState({\r\n    name:\r\n      dataHeader.filter(\r\n        (value) => value.order.status === true && value.order.active === true\r\n      ).length > 0\r\n        ? dataHeader\r\n            .filter(\r\n              (value) =>\r\n                value.order.status === true && value.order.active === true\r\n            )[0]\r\n            .name.replace(/\\s/g, \"\")\r\n        : \"\",\r\n    order:\r\n      dataHeader.filter(\r\n        (value) => value.order.status === true && value.order.active === true\r\n      ).length > 0\r\n        ? dataHeader.filter(\r\n            (value) =>\r\n              value.order.status === true && value.order.active === true\r\n          )[0].order.status\r\n        : true,\r\n  });\r\n  const [nameStateFilter, setNameStateFilter] = React.useState(\"\");\r\n  const [filterTable, setFilterTable] = React.useState({});\r\n  const [filterSort, setFilterSort] = React.useState({ filter: {}, sort: {} });\r\n  const generateFilterUrl = (data) => {\r\n    var ret = \"\";\r\n    for (var p in data) {\r\n      if (data[p]) ret += \"filter[\" + p + \"]=\" + data[p] + \"&\";\r\n    }\r\n    return ret;\r\n  };\r\n  const generateSortUrl = (data) => {\r\n    var ret = `${data.name},${data.order ? \"asc\" : \"desc\"}`;\r\n    return ret;\r\n  };\r\n  const requestFilterSort = React.useCallback(\r\n    (updateFilterTable, updateSortTable) => {\r\n      let pagination = Object.assign({}, paginations);\r\n      let filterSorts = filterSort;\r\n      filterSorts.filter = generateFilterUrl(\r\n        updateFilterTable ? updateFilterTable : filterTable\r\n      );\r\n      filterSorts.sort = generateSortUrl(\r\n        updateSortTable ? updateSortTable : sortData\r\n      );\r\n      pagination.page = pagination.page + 1;\r\n      filterSorts = Object.assign({}, filterSorts, pagination);\r\n      setFilterSort({ ...filterSorts });\r\n      let params =\r\n        filterSorts.filter +\r\n        \"page=\" +\r\n        filterSorts.page +\r\n        \"&rowsPerPage=\" +\r\n        filterSorts.rowsPerPage +\r\n        \"&sort=\" +\r\n        filterSorts.sort;\r\n      handleParams(params);\r\n    },\r\n    [filterTable, sortData, filterSort, intl, paginations]\r\n  );\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    let pagination = paginations;\r\n    pagination.numberColum =\r\n      newPage > pagination.page\r\n        ? pagination.numberColum + pagination.rowsPerPage\r\n        : pagination.numberColum - pagination.rowsPerPage;\r\n    pagination.page = newPage;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    let pagination = paginations;\r\n    pagination.page = 0;\r\n    pagination.rowsPerPage = parseInt(event.target.value, 10);\r\n    pagination.numberColum = 0;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const createSortHandler = (item) => {\r\n    let sortDatas = sortData;\r\n    if (item.name.replace(/\\s/g, \"\") === sortDatas.name) {\r\n      sortDatas.order = !sortDatas.order;\r\n    } else {\r\n      sortDatas.name = item.name.replace(/\\s/g, \"\");\r\n      sortDatas.order = true;\r\n    }\r\n    setSortData({\r\n      ...sortDatas,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const openFilterTable = (name, index) => {\r\n    let idFilter = index;\r\n    let idInputFilter = name;\r\n    let status = document.getElementById(idFilter).getAttribute(\"status\");\r\n    if (nameStateFilter === \"\") {\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    } else if (nameStateFilter === idFilter) {\r\n      if (status === \"closed\") {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n        document.getElementById(idFilter).classList.add(\"open\");\r\n      } else {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"closed\");\r\n        document.getElementById(idFilter).classList.remove(\"open\");\r\n        document.getElementById(idInputFilter).value =\r\n          filterTable[idInputFilter] || \"\";\r\n      }\r\n    } else {\r\n      document.getElementById(nameStateFilter).setAttribute(\"status\", \"closed\");\r\n      document.getElementById(nameStateFilter).classList.remove(\"open\");\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    }\r\n  };\r\n\r\n  const updateValueFilter = (property, index) => {\r\n    let filterTables = filterTable;\r\n    filterTables[property] = document.getElementById(property).value;\r\n    setFilterTable({ ...filterTables });\r\n    openFilterTable(property, index);\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetValueFilter = (property) => {\r\n    let filterTables = filterTable;\r\n    filterTables[property] = \"\";\r\n    document.getElementById(property).value = \"\";\r\n    setFilterTable({ ...filterTables });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilterTable({});\r\n    document.getElementById(\"filter-form-all\").reset();\r\n    requestFilterSort({});\r\n  };\r\n\r\n  React.useEffect(requestFilterSort, []);\r\n  React.useEffect(() => {\r\n    setPaginations({ ...paginations, count: countData || 0 });\r\n  }, [countData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <form id=\"filter-form-all\" className=\"panel-filter-table mb-1\">\r\n          <span className=\"mr-2 mt-2 float-left\">\r\n            <FormattedMessage id=\"LABEL.FILTER.TABLE\" />\r\n          </span>\r\n          <div className=\"d-block\">\r\n            <div className=\"\">\r\n              {dataHeader\r\n                .filter((value) => value.filter.active === true)\r\n                .map((item, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index.toString()}\r\n                      className=\"btn-group hover-filter-table\"\r\n                      status=\"closed\"\r\n                      id={index}\r\n                    >\r\n                      <div\r\n                        className=\"btn btn-sm dropdown-toggle\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-expanded=\"false\"\r\n                        onClick={() => {\r\n                          openFilterTable(item.name.replace(/\\s/g, \"\"), index);\r\n                        }}\r\n                      >\r\n                        <span>\r\n                          <FormattedMessage id={item.title} />:\r\n                        </span>\r\n                        <strong style={{ paddingRight: 1, paddingLeft: 1 }}>\r\n                          <span\r\n                            className=\"filter-label\"\r\n                            id={\"filter-span-\" + index}\r\n                          >\r\n                            {filterTable[item.name.replace(/\\s/g, \"\")]}\r\n                          </span>\r\n                        </strong>\r\n                        {filterTable[item.name.replace(/\\s/g, \"\")] ? null : (\r\n                          <span style={{ color: \"#777777\" }}>\r\n                            <FormattedMessage id=\"LABEL.ALL\" />\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <ul\r\n                        role=\"menu\"\r\n                        className=\"dropdown-menu\"\r\n                        style={{ zIndex: 90 }}\r\n                      >\r\n                        <li style={{ width: 380, padding: 5 }}>\r\n                          <div className=\"clearfix\">\r\n                            <div className=\"float-left\">\r\n                              <input\r\n                                type={item.filter.type}\r\n                                className=\"form-control form-control-sm\"\r\n                                min=\"0\"\r\n                                name={item.name.replace(/\\s/g, \"\")}\r\n                                id={item.name.replace(/\\s/g, \"\")}\r\n                                defaultValue={\r\n                                  filterTable[item.name.replace(/\\s/g, \"\")] ||\r\n                                  \"\"\r\n                                }\r\n                                placeholder={intl.formatMessage({\r\n                                  id: \"LABEL.ALL\",\r\n                                })}\r\n                                style={{ width: 200 }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-left btn btn-sm btn-primary\"\r\n                                onClick={() => {\r\n                                  updateValueFilter(\r\n                                    item.name.replace(/\\s/g, \"\"),\r\n                                    index\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <FormattedMessage id=\"LABEL.UPDATE\" />\r\n                              </button>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-right btn btn-sm btn-light d-flex\"\r\n                                onClick={() => {\r\n                                  resetValueFilter(\r\n                                    item.name.replace(/\\s/g, \"\")\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <i className=\"fas fa-redo fa-right\"></i>\r\n                                <span>\r\n                                  <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n                                </span>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  );\r\n                })}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-sm btn-danger ml-2 mt-2 button-filter-submit\"\r\n                onClick={() => {\r\n                  resetFilter();\r\n                }}\r\n              >\r\n                <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <div>\r\n          <TableContainer component={Paper}>\r\n            <Table className={\"hecto-\" + hecto}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {dataHeader.map((item, index) => {\r\n                    return (\r\n                      <TableCell\r\n                        className=\"bg-primary text-uppercase\"\r\n                        key={index.toString()}\r\n                      >\r\n                        {item.order.active ? (\r\n                          <TableSortLabel\r\n                            active={\r\n                              sortData.name === item.name.replace(/\\s/g, \"\")\r\n                            }\r\n                            direction={sortData.order ? \"asc\" : \"desc\"}\r\n                            onClick={() => {\r\n                              createSortHandler(item);\r\n                            }}\r\n                          >\r\n                            <span>\r\n                              <FormattedMessage id={item.title} />\r\n                            </span>\r\n                          </TableSortLabel>\r\n                        ) : (\r\n                          <span>\r\n                            <FormattedMessage id={item.title} />\r\n                          </span>\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{children}</TableBody>\r\n            </Table>\r\n\r\n            <div className=\"table-loading-data\">\r\n              <div className=\"text-center font-weight-bold py-5\">\r\n                <div className=\"table-loading-data-potition\">\r\n                  {loading && (\r\n                    <span>\r\n                      <i className=\"fas fa-spinner fa-pulse text-dark mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.TABLE.WAITING_DATA\" />\r\n                    </span>\r\n                  )}\r\n                  {err && (\r\n                    <span className=\"text-danger\">\r\n                      <i className=\"far fa-frown text-danger mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.ERROR_REQUEST\" />\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[10, 25, 50, 75, 100, 250, 500, 1000]}\r\n            component=\"div\"\r\n            count={paginations.count}\r\n            rowsPerPage={paginations.rowsPerPage}\r\n            page={paginations.page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default injectIntl(connect(null, null)(Tables));\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport TableOnly from \"../../components/tableCustomV1/tableOnly\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { listReservationOnline } from \"./_redux/CrudReservationPatient\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport ButtonAction from \"../../components/buttonAction/ButtonAction\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.PATIENT_CODE\",\r\n  },\r\n  {\r\n    title: \"LABEL.REGISTRATION_NO\",\r\n  },\r\n  {\r\n    title: \"LABEL.PATIENT_NAME\",\r\n  },\r\n  {\r\n    title: \"LABEL.RESERVATION_DATE\",\r\n  },\r\n  {\r\n    title: \"LABEL.POLI\",\r\n  },\r\n  {\r\n    title: \"LABEL.STATUS\",\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n  },\r\n];\r\n\r\nconst data_ops = [\r\n  {\r\n    label: \"LABEL.CHECK_IN\",\r\n    icon: \"fas fa-user-check text-primary\",\r\n    type: \"open\",\r\n  },\r\n];\r\n\r\nfunction ListReservationOnlinePage(props) {\r\n  const { intl } = props;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const suhbeader = useSubheader();\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: \"/registry/regis-page/list-online\",\r\n        title: intl.formatMessage({ id: \"LABEL.REGISTER_ONLINE_RESERVATION\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(\r\n      intl.formatMessage({ id: \"LABEL.REGISTER_ONLINE_RESERVATION\" })\r\n    );\r\n  }, []);\r\n\r\n  const callApiListReservationOnline = () => {\r\n    setLoading(true);\r\n    listReservationOnline()\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListReservationOnline, []);\r\n\r\n  const handleAction = (type, data) => {\r\n    props.history.push(`/registry/patient/list/${data.id}`);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <TableOnly dataHeader={headerTable} loading={loading} hecto={10}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{item.kode_pasien}</TableCell>\r\n                  <TableCell>{item.code_reg}</TableCell>\r\n                  <TableCell>{item.nama}</TableCell>\r\n                  <TableCell>{item.tgl_book}</TableCell>\r\n                  <TableCell>{item.poli}</TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" ? (\r\n                      <FormattedMessage id=\"LABEL.BOOKING\" />\r\n                    ) : item.status === \"2\" ? (\r\n                      <FormattedMessage id=\"LABEL.CANCELED\" />\r\n                    ) : (\r\n                      <FormattedMessage id=\"LABEL.CHECK_IN\" />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <ButtonAction\r\n                      data={item}\r\n                      handleAction={handleAction}\r\n                      ops={data_ops}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableOnly>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListReservationOnlinePage));\r\n","import axios from \"axios\";\r\n\r\nexport function listReservationOffline() {\r\n  return axios.get(`/api/v1/reservasioff`);\r\n}\r\nexport function listReservationOnline() {\r\n  return axios.get(`/api/v1/reservasion`);\r\n}\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport TableOnly from \"../../components/tableCustomV1/tableOnly\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { listReservationOffline } from \"./_redux/CrudReservationPatient\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.PATIENT_CODE\",\r\n  },\r\n  {\r\n    title: \"LABEL.REGISTRATION_NO\",\r\n  },\r\n  {\r\n    title: \"LABEL.PATIENT_NAME\",\r\n  },\r\n  {\r\n    title: \"LABEL.RESERVATION_DATE\",\r\n  },\r\n  {\r\n    title: \"LABEL.POLI\",\r\n  },\r\n  {\r\n    title: \"LABEL.STATUS\",\r\n  },\r\n];\r\n\r\nfunction ListReservationOfflinePage(props) {\r\n  const { intl } = props;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const suhbeader = useSubheader();\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: \"/registry/regis-page/list-offline\",\r\n        title: intl.formatMessage({ id: \"LABEL.REGISTER_OFFLINE_RESERVATION\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(\r\n      intl.formatMessage({ id: \"LABEL.REGISTER_OFFLINE_RESERVATION\" })\r\n    );\r\n  }, []);\r\n\r\n  const callApiListReservationOffline = () => {\r\n    setLoading(true);\r\n    listReservationOffline()\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListReservationOffline, []);\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <TableOnly dataHeader={headerTable} loading={loading} hecto={10}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{item.kode_pasien}</TableCell>\r\n                  <TableCell>{item.code_reg}</TableCell>\r\n                  <TableCell>{item.nama}</TableCell>\r\n                  <TableCell>{item.tgl_book}</TableCell>\r\n                  <TableCell>{item.poli}</TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" ? (\r\n                      <FormattedMessage id=\"LABEL.BOOKING\" />\r\n                    ) : item.status === \"2\" ? (\r\n                      <FormattedMessage id=\"LABEL.CANCELED\" />\r\n                    ) : (\r\n                      <FormattedMessage id=\"LABEL.CHECK_IN\" />\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableOnly>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListReservationOfflinePage));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n    name: \"action\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListReservationCheckInPage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Check In\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListReservationCheckInPage));\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { useSubheader } from \"../../../../_metronic/layout\";\r\nimport ListReservationOnlinePage from \"./ListReservationOnlinePage\";\r\nimport ListReservationOfflinePage from \"./ListReservationOfflinePage\";\r\nimport ListReservationCheckInPage from \"./ListReservationCheckInPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootReservation(props) {\r\n  // const suhbeader = useSubheader();\r\n  // const { intl } = props;\r\n  // suhbeader.setTitle(intl.formatMessage({\r\n  //   id: \"MENU.DELIVERY_MONITORING.LIST_CONTRACT_PO\",\r\n  // }));\r\n  return (\r\n    <Switch>\r\n      <Redirect exact from=\"/registry/regis-page\" to=\"/registry/dashboard\" />\r\n      <Route\r\n        path=\"/registry/regis-page/list-online\"\r\n        component={(props) => <ListReservationOnlinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-offline\"\r\n        component={(props) => <ListReservationOfflinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-check-in\"\r\n        component={(props) => <ListReservationCheckInPage {...props} />}\r\n        exact\r\n      />\r\n      {/* <Route\r\n        path=\"/registry/regis-page/contract/:contract\"\r\n        component={(props) => <ListTermContract {...props} />}\r\n        exact={true}\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/contract\"\r\n        component={DashboardListContract}\r\n      />\r\n      <Route path=\"/registry/regis-page/spt/:id\" component={ItemSpt} />\r\n      <Route path=\"/registry/regis-page/spt\" component={DashboardListSpt} />\r\n      <Route\r\n        path=\"/registry/regis-page/mismatch\"\r\n        component={DashboardListMismatch}\r\n      />\r\n      <Route path=\"/registry/regis-page/bkb\" component={DashboardListBkb} />\r\n      <Route path=\"/registry/regis-page/dashboard\" component={Dashboard} />\r\n      <Route\r\n        path=\"/registry/regis-page/invoice_document\"\r\n        component={DashboardListInvoice}\r\n      /> */}\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootReservation));\r\n"],"sourceRoot":""}