{"version":3,"sources":["app/components/tableCustomV1/table.js","app/modules/RegistrationPatient/ListRegistrationOnlinePage.js","app/modules/RegistrationPatient/ListRegistrationOfflinePage.js","app/modules/RegistrationPatient/ListRegistrationCheckInPage.js","app/modules/RegistrationPatient/RootRegistration.js"],"names":["injectIntl","connect","props","intl","dataHeader","handleParams","loading","err","children","countData","hecto","React","useState","numberColum","page","count","rowsPerPage","paginations","setPaginations","name","filter","value","order","status","active","length","replace","sortData","setSortData","nameStateFilter","setNameStateFilter","filterTable","setFilterTable","sort","filterSort","setFilterSort","requestFilterSort","useCallback","updateFilterTable","updateSortTable","data","pagination","Object","assign","filterSorts","ret","p","generateFilterUrl","params","openFilterTable","index","idFilter","idInputFilter","document","getElementById","getAttribute","setAttribute","classList","add","remove","useEffect","Fragment","id","className","map","item","key","toString","data-toggle","aria-expanded","onClick","title","style","paddingRight","paddingLeft","color","role","zIndex","width","padding","type","min","defaultValue","placeholder","formatMessage","property","filterTables","updateValueFilter","resetValueFilter","reset","component","Paper","direction","sortDatas","createSortHandler","rowsPerPageOptions","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","headerTable","setLoading","setData","setParamsTable","setErr","useSubheader","setTitle","TableRow","TableCell","exact","from","to","path"],"mappings":"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","file":"static/js/6.d724e599.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\n\r\nconst Tables = (props) => {\r\n  const {\r\n    intl,\r\n    dataHeader = [],\r\n    handleParams,\r\n    loading = false,\r\n    err = false,\r\n    children,\r\n    countData = 0,\r\n    hecto = 1,\r\n  } = props;\r\n  const [paginations, setPaginations] = React.useState({\r\n    numberColum: 0,\r\n    page: 0,\r\n    count: countData,\r\n    rowsPerPage: 10,\r\n  });\r\n  const [sortData, setSortData] = React.useState({\r\n    name:\r\n      dataHeader.filter(\r\n        (value) => value.order.status === true && value.order.active === true\r\n      ).length > 0\r\n        ? dataHeader\r\n            .filter(\r\n              (value) =>\r\n                value.order.status === true && value.order.active === true\r\n            )[0]\r\n            .name.replace(/\\s/g, \"\")\r\n        : \"\",\r\n    order:\r\n      dataHeader.filter(\r\n        (value) => value.order.status === true && value.order.active === true\r\n      ).length > 0\r\n        ? dataHeader.filter(\r\n            (value) =>\r\n              value.order.status === true && value.order.active === true\r\n          )[0].order.status\r\n        : true,\r\n  });\r\n  const [nameStateFilter, setNameStateFilter] = React.useState(\"\");\r\n  const [filterTable, setFilterTable] = React.useState({});\r\n  const [filterSort, setFilterSort] = React.useState({ filter: {}, sort: {} });\r\n  const generateFilterUrl = (data) => {\r\n    var ret = \"\";\r\n    for (var p in data) {\r\n      if (data[p]) ret += \"filter[\" + p + \"]=\" + data[p] + \"&\";\r\n    }\r\n    return ret;\r\n  };\r\n  const generateSortUrl = (data) => {\r\n    var ret = `${data.name},${data.order ? \"asc\" : \"desc\"}`;\r\n    return ret;\r\n  };\r\n  const requestFilterSort = React.useCallback(\r\n    (updateFilterTable, updateSortTable) => {\r\n      let pagination = Object.assign({}, paginations);\r\n      let filterSorts = filterSort;\r\n      filterSorts.filter = generateFilterUrl(\r\n        updateFilterTable ? updateFilterTable : filterTable\r\n      );\r\n      filterSorts.sort = generateSortUrl(\r\n        updateSortTable ? updateSortTable : sortData\r\n      );\r\n      pagination.page = pagination.page + 1;\r\n      filterSorts = Object.assign({}, filterSorts, pagination);\r\n      setFilterSort({ ...filterSorts });\r\n      let params =\r\n        filterSorts.filter +\r\n        \"page=\" +\r\n        filterSorts.page +\r\n        \"&rowsPerPage=\" +\r\n        filterSorts.rowsPerPage +\r\n        \"&sort=\" +\r\n        filterSorts.sort;\r\n      handleParams(params);\r\n    },\r\n    [filterTable, sortData, filterSort, intl, paginations]\r\n  );\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    let pagination = paginations;\r\n    pagination.numberColum =\r\n      newPage > pagination.page\r\n        ? pagination.numberColum + pagination.rowsPerPage\r\n        : pagination.numberColum - pagination.rowsPerPage;\r\n    pagination.page = newPage;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    let pagination = paginations;\r\n    pagination.page = 0;\r\n    pagination.rowsPerPage = parseInt(event.target.value, 10);\r\n    pagination.numberColum = 0;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const createSortHandler = (item) => {\r\n    let sortDatas = sortData;\r\n    if (item.name.replace(/\\s/g, \"\") === sortDatas.name) {\r\n      sortDatas.order = !sortDatas.order;\r\n    } else {\r\n      sortDatas.name = item.name.replace(/\\s/g, \"\");\r\n      sortDatas.order = true;\r\n    }\r\n    setSortData({\r\n      ...sortDatas,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const openFilterTable = (name, index) => {\r\n    let idFilter = index;\r\n    let idInputFilter = name;\r\n    let status = document.getElementById(idFilter).getAttribute(\"status\");\r\n    if (nameStateFilter === \"\") {\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    } else if (nameStateFilter === idFilter) {\r\n      if (status === \"closed\") {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n        document.getElementById(idFilter).classList.add(\"open\");\r\n      } else {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"closed\");\r\n        document.getElementById(idFilter).classList.remove(\"open\");\r\n        document.getElementById(idInputFilter).value =\r\n          filterTable[idInputFilter] || \"\";\r\n      }\r\n    } else {\r\n      document.getElementById(nameStateFilter).setAttribute(\"status\", \"closed\");\r\n      document.getElementById(nameStateFilter).classList.remove(\"open\");\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    }\r\n  };\r\n\r\n  const updateValueFilter = (property, index) => {\r\n    let filterTables = filterTable;\r\n    filterTables[property] = document.getElementById(property).value;\r\n    setFilterTable({ ...filterTables });\r\n    openFilterTable(property, index);\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetValueFilter = (property) => {\r\n    let filterTables = filterTable;\r\n    filterTables[property] = \"\";\r\n    document.getElementById(property).value = \"\";\r\n    setFilterTable({ ...filterTables });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilterTable({});\r\n    document.getElementById(\"filter-form-all\").reset();\r\n    requestFilterSort({});\r\n  };\r\n\r\n  React.useEffect(requestFilterSort, []);\r\n  React.useEffect(() => {\r\n    setPaginations({ ...paginations, count: countData || 0 });\r\n  }, [countData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <form id=\"filter-form-all\" className=\"panel-filter-table mb-1\">\r\n          <span className=\"mr-2 mt-2 float-left\">\r\n            <FormattedMessage id=\"LABEL.FILTER.TABLE\" />\r\n          </span>\r\n          <div className=\"d-block\">\r\n            <div className=\"\">\r\n              {dataHeader\r\n                .filter((value) => value.filter.active === true)\r\n                .map((item, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index.toString()}\r\n                      className=\"btn-group hover-filter-table\"\r\n                      status=\"closed\"\r\n                      id={index}\r\n                    >\r\n                      <div\r\n                        className=\"btn btn-sm dropdown-toggle\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-expanded=\"false\"\r\n                        onClick={() => {\r\n                          openFilterTable(item.name.replace(/\\s/g, \"\"), index);\r\n                        }}\r\n                      >\r\n                        <span>\r\n                          <FormattedMessage id={item.title} />:\r\n                        </span>\r\n                        <strong style={{ paddingRight: 1, paddingLeft: 1 }}>\r\n                          <span\r\n                            className=\"filter-label\"\r\n                            id={\"filter-span-\" + index}\r\n                          >\r\n                            {filterTable[item.name.replace(/\\s/g, \"\")]}\r\n                          </span>\r\n                        </strong>\r\n                        {filterTable[item.name.replace(/\\s/g, \"\")] ? null : (\r\n                          <span style={{ color: \"#777777\" }}>\r\n                            <FormattedMessage id=\"LABEL.ALL\" />\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <ul\r\n                        role=\"menu\"\r\n                        className=\"dropdown-menu\"\r\n                        style={{ zIndex: 90 }}\r\n                      >\r\n                        <li style={{ width: 380, padding: 5 }}>\r\n                          <div className=\"clearfix\">\r\n                            <div className=\"float-left\">\r\n                              <input\r\n                                type={item.filter.type}\r\n                                className=\"form-control form-control-sm\"\r\n                                min=\"0\"\r\n                                name={item.name.replace(/\\s/g, \"\")}\r\n                                id={item.name.replace(/\\s/g, \"\")}\r\n                                defaultValue={\r\n                                  filterTable[item.name.replace(/\\s/g, \"\")] ||\r\n                                  \"\"\r\n                                }\r\n                                placeholder={intl.formatMessage({\r\n                                  id: \"LABEL.ALL\",\r\n                                })}\r\n                                style={{ width: 200 }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-left btn btn-sm btn-primary\"\r\n                                onClick={() => {\r\n                                  updateValueFilter(\r\n                                    item.name.replace(/\\s/g, \"\"),\r\n                                    index\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <FormattedMessage id=\"LABEL.UPDATE\" />\r\n                              </button>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-right btn btn-sm btn-light d-flex\"\r\n                                onClick={() => {\r\n                                  resetValueFilter(\r\n                                    item.name.replace(/\\s/g, \"\")\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <i className=\"fas fa-redo fa-right\"></i>\r\n                                <span>\r\n                                  <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n                                </span>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  );\r\n                })}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-sm btn-danger ml-2 mt-2 button-filter-submit\"\r\n                onClick={() => {\r\n                  resetFilter();\r\n                }}\r\n              >\r\n                <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <div>\r\n          <TableContainer component={Paper}>\r\n            <Table className={\"hecto-\" + hecto}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {dataHeader.map((item, index) => {\r\n                    return (\r\n                      <TableCell\r\n                        className=\"bg-primary text-uppercase\"\r\n                        key={index.toString()}\r\n                      >\r\n                        {item.order.active ? (\r\n                          <TableSortLabel\r\n                            active={\r\n                              sortData.name === item.name.replace(/\\s/g, \"\")\r\n                            }\r\n                            direction={sortData.order ? \"asc\" : \"desc\"}\r\n                            onClick={() => {\r\n                              createSortHandler(item);\r\n                            }}\r\n                          >\r\n                            <span>\r\n                              <FormattedMessage id={item.title} />\r\n                            </span>\r\n                          </TableSortLabel>\r\n                        ) : (\r\n                          <span>\r\n                            <FormattedMessage id={item.title} />\r\n                          </span>\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{children}</TableBody>\r\n            </Table>\r\n\r\n            <div className=\"table-loading-data\">\r\n              <div className=\"text-center font-weight-bold py-5\">\r\n                <div className=\"table-loading-data-potition\">\r\n                  {loading && (\r\n                    <span>\r\n                      <i className=\"fas fa-spinner fa-pulse text-dark mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.TABLE.WAITING_DATA\" />\r\n                    </span>\r\n                  )}\r\n                  {err && (\r\n                    <span className=\"text-danger\">\r\n                      <i className=\"far fa-frown text-danger mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.ERROR_REQUEST\" />\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[10, 25, 50, 75, 100, 250, 500, 1000]}\r\n            component=\"div\"\r\n            count={paginations.count}\r\n            rowsPerPage={paginations.rowsPerPage}\r\n            page={paginations.page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default injectIntl(connect(null, null)(Tables));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"contract\",\r\n  //   name: \"contract_no\",\r\n  //   order: {\r\n  //     active: true,\r\n  //     status: true,\r\n  //   },\r\n  //   filter: {\r\n  //     active: true,\r\n  //     type: \"text\",\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n    name: \"action\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationOnlinePage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationOnlinePage));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationOfflinePage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationOfflinePage));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n    name: \"action\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationCheckInPage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationCheckInPage));\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { useSubheader } from \"../../../../_metronic/layout\";\r\nimport ListRegistrationOnlinePage from \"./ListRegistrationOnlinePage\";\r\nimport ListRegistrationOfflinePage from \"./ListRegistrationOfflinePage\";\r\nimport ListRegistrationCheckInPage from \"./ListRegistrationCheckInPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootRegistration(props) {\r\n  // const suhbeader = useSubheader();\r\n  // const { intl } = props;\r\n  // suhbeader.setTitle(intl.formatMessage({\r\n  //   id: \"MENU.DELIVERY_MONITORING.LIST_CONTRACT_PO\",\r\n  // }));\r\n  return (\r\n    <Switch>\r\n      <Redirect exact from=\"/registry/regis-page\" to=\"/registry/dashboard\" />\r\n      <Route\r\n        path=\"/registry/regis-page/list-online\"\r\n        component={(props) => <ListRegistrationOnlinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-offline\"\r\n        component={(props) => <ListRegistrationOfflinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-check-in\"\r\n        component={(props) => <ListRegistrationCheckInPage {...props} />}\r\n        exact\r\n      />\r\n      {/* <Route\r\n        path=\"/registry/regis-page/contract/:contract\"\r\n        component={(props) => <ListTermContract {...props} />}\r\n        exact={true}\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/contract\"\r\n        component={DashboardListContract}\r\n      />\r\n      <Route path=\"/registry/regis-page/spt/:id\" component={ItemSpt} />\r\n      <Route path=\"/registry/regis-page/spt\" component={DashboardListSpt} />\r\n      <Route\r\n        path=\"/registry/regis-page/mismatch\"\r\n        component={DashboardListMismatch}\r\n      />\r\n      <Route path=\"/registry/regis-page/bkb\" component={DashboardListBkb} />\r\n      <Route path=\"/registry/regis-page/dashboard\" component={Dashboard} />\r\n      <Route\r\n        path=\"/registry/regis-page/invoice_document\"\r\n        component={DashboardListInvoice}\r\n      /> */}\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootRegistration));\r\n"],"sourceRoot":""}