{"version":3,"sources":["app/modules/ScheduleDoctor/ScheduleDoctorPage.js","app/modules/ScheduleDoctor/_redux/CrudScheduleDoctor.js","app/modules/ScheduleDoctor/RootScheduleDoctor.js"],"names":["initialValues","injectIntl","connect","props","intl","useState","dialogRegis","setDialogRegis","loadingSave","setLoadingSave","dataCalendar","setDataCalendar","optionParameterPoli","setOptionParameterPoli","selectedParameterPoli","setSelectedParameterPoli","optionParameterDoctor","setOptionParameterDoctor","selectedParameterDoctor","setSelectedParameterDoctor","suhbeader","useSubheader","useLayoutEffect","setBreadcrumbs","pathname","title","formatMessage","id","setTitle","callApiListSchedule","axios","get","then","result","data","forEach","element","start","praktek_date","nama_dokter","sort","a","b","Date","catch","err","MODAL","showSnackbar","useEffect","Schema","Yup","shape","poli_id","required","dokter_id","formik","useFormik","validationSchema","onSubmit","values","setStatus","setSubmitting","post","resetForm","value","label","poli","nama","Fragment","Dialog","open","maxWidth","fullWidth","aria-labelledby","aria-describedby","autoComplete","handleSubmit","DialogTitle","DialogContent","style","height","className","options","isDisabled","classNamePrefix","menuPlacement","onChange","setFieldValue","onBlur","setFieldTouched","touched","errors","type","min","window","moment","format","disabled","getFieldProps","DialogActions","isValid","Object","keys","length","constructor","onClick","plugins","dayGridPlugin","timeGridPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","initialEvents","events","select","e","eventClick","eventsSet","path","component","ScheduleDoctorPage","exact"],"mappings":"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","file":"static/js/33.d8d64c25.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n} from \"../../../_metronic/_partials/controls\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport {\r\n  createScheduleDoctor,\r\n  getScheduleDoctor,\r\n  listAllPoli,\r\n  listDoctor,\r\n} from \"./_redux/CrudScheduleDoctor\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport Select from \"react-select\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\n\r\nconst initialValues = {};\r\n\r\nfunction ScheduleDoctor(props) {\r\n  const { intl } = props;\r\n  const [dialogRegis, setDialogRegis] = useState(false);\r\n  const [loadingSave, setLoadingSave] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataCalendar, setDataCalendar] = useState([]);\r\n  const [optionParameterPoli, setOptionParameterPoli] = useState([]);\r\n  const [selectedParameterPoli, setSelectedParameterPoli] = useState({});\r\n  const [optionParameterDoctor, setOptionParameterDoctor] = useState([]);\r\n  const [selectedParameterDoctor, setSelectedParameterDoctor] = useState({});\r\n  const suhbeader = useSubheader();\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/registry/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: \"/registry/regis-doctor\",\r\n        title: intl.formatMessage({ id: \"LABEL.SCHEDULE_DOCTOR\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.SCHEDULE_DOCTOR\" }));\r\n  }, []);\r\n\r\n  const callApiListSchedule = () => {\r\n    getScheduleDoctor()\r\n      .then((result) => {\r\n        result.data.data.forEach((element) => {\r\n          element.title = \"Nama Poli\";\r\n          element.start = element.praktek_date;\r\n          element.nama_dokter = \"Nama Dokter\";\r\n        });\r\n        result.data.data.sort((a, b) =>\r\n          new Date(a.praktek_date) < new Date(b.praktek_date)\r\n            ? 1\r\n            : new Date(b.praktek_date) < new Date(a.praktek_date)\r\n            ? -1\r\n            : 0\r\n        );\r\n        setDataCalendar(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n  useEffect(callApiListSchedule, []);\r\n\r\n  const Schema = Yup.object().shape({\r\n    poli_id: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    dokter_id: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    praktek_date: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: Schema,\r\n    onSubmit: async (values, { setStatus, setSubmitting }) => {\r\n      setLoadingSave(true);\r\n      createScheduleDoctor(values)\r\n        .then((result) => {\r\n          setLoadingSave(false);\r\n          setDialogRegis(false);\r\n          setSelectedParameterDoctor({});\r\n          setSelectedParameterPoli({});\r\n          formik.resetForm();\r\n          callApiListSchedule();\r\n          MODAL.showSnackbar(\r\n            intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n            \"success\"\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setLoadingSave(false);\r\n          MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n        });\r\n    },\r\n  });\r\n\r\n  const callApiListPoli = () => {\r\n    listAllPoli()\r\n      .then((result) => {\r\n        var data = result.data.data;\r\n        data.forEach((element) => {\r\n          element.value = element.id;\r\n          element.label = element.poli;\r\n        });\r\n        setOptionParameterPoli(data);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListPoli, []);\r\n\r\n  const callApiListDoctor = () => {\r\n    listDoctor()\r\n      .then((result) => {\r\n        var data = result.data.data;\r\n        data.forEach((element) => {\r\n          element.value = element.id;\r\n          element.label = element.nama;\r\n        });\r\n        setOptionParameterDoctor(data);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListDoctor, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        open={dialogRegis}\r\n        // keepMounted\r\n        maxWidth=\"md\"\r\n        fullWidth={true}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n          <DialogTitle>\r\n            <FormattedMessage id=\"LABEL.ADD\" />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div style={{ height: 400 }}>\r\n              <div className=\"form-group row\">\r\n                <label className=\"col-sm-3 col-form-label\">\r\n                  <FormattedMessage id=\"LABEL.DOCTOR\" />\r\n                </label>\r\n                <div className=\"col-sm-9\">\r\n                  <Select\r\n                    value={selectedParameterDoctor}\r\n                    options={optionParameterDoctor}\r\n                    isDisabled={loadingSave}\r\n                    className=\"form-control border-0 p-0 h-100 rounded-0\"\r\n                    classNamePrefix=\"react-select\"\r\n                    menuPlacement=\"auto\"\r\n                    onChange={(value) => {\r\n                      setSelectedParameterDoctor(value);\r\n                      formik.setFieldValue(\"dokter_id\", value.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      formik.setFieldTouched({ ...formik, dokter_id: true });\r\n                    }}\r\n                  />\r\n                  {formik.touched.dokter_id && formik.errors.dokter_id && (\r\n                    <span className=\"text-left text-danger\">\r\n                      {formik.errors.dokter_id}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group row\">\r\n                <label className=\"col-sm-3 col-form-label\">\r\n                  <FormattedMessage id=\"LABEL.POLI\" />\r\n                </label>\r\n                <div className=\"col-sm-9\">\r\n                  <Select\r\n                    value={selectedParameterPoli}\r\n                    options={optionParameterPoli}\r\n                    isDisabled={loadingSave}\r\n                    className=\"form-control border-0 p-0 h-100 rounded-0\"\r\n                    classNamePrefix=\"react-select\"\r\n                    menuPlacement=\"auto\"\r\n                    onChange={(value) => {\r\n                      setSelectedParameterPoli(value);\r\n                      formik.setFieldValue(\"poli_id\", value.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      formik.setFieldTouched({ ...formik, poli_id: true });\r\n                    }}\r\n                  />\r\n                  {formik.touched.poli_id && formik.errors.poli_id && (\r\n                    <span className=\"text-left text-danger\">\r\n                      {formik.errors.poli_id}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group row\">\r\n                <label className=\"col-sm-3 col-form-label\">\r\n                  <FormattedMessage id=\"LABEL.SCHEDULE_DOCTOR\" />\r\n                </label>\r\n                <div className=\"col-sm-9\">\r\n                  <input\r\n                    type=\"date\"\r\n                    min={window.moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    required\r\n                    className=\"form-control\"\r\n                    disabled={loadingSave}\r\n                    {...formik.getFieldProps(\"praktek_date\")}\r\n                  />\r\n                  {formik.touched.praktek_date &&\r\n                    formik.errors.praktek_date && (\r\n                      <span className=\"text-left text-danger\">\r\n                        {formik.errors.praktek_date}\r\n                      </span>\r\n                    )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={\r\n                !formik.isValid ||\r\n                (Object.keys(formik.touched).length === 0 &&\r\n                  formik.touched.constructor === Object) ||\r\n                loadingSave\r\n              }\r\n            >\r\n              {loadingSave ? (\r\n                <i className=\"fas fa-spinner fa-pulse px-2\"></i>\r\n              ) : (\r\n                <i className=\"fas fa-save ml-2\"></i>\r\n              )}\r\n              {loadingSave ? (\r\n                <FormattedMessage id=\"LABEL.WAITING\" />\r\n              ) : (\r\n                <FormattedMessage id=\"LABEL.SAVE\" />\r\n              )}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => {\r\n                setDialogRegis(false);\r\n                setSelectedParameterDoctor({});\r\n                setSelectedParameterPoli({});\r\n                formik.resetForm();\r\n              }}\r\n              disabled={loadingSave}\r\n            >\r\n              <i className=\"fas fa-times px-1\"></i>\r\n              <FormattedMessage id=\"LABEL.CANCEL\" />\r\n            </button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n      <Card>\r\n        <CardHeader title=\"\">\r\n          <CardHeaderToolbar>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-primary mx-1`}\r\n              onClick={() => {\r\n                setDialogRegis(true);\r\n              }}\r\n            >\r\n              <FormattedMessage id=\"LABEL.ADD\" />\r\n              <i className=\"far fa-calendar-plus ml-2\"></i>\r\n            </button>\r\n          </CardHeaderToolbar>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin]}\r\n            headerToolbar={{\r\n              left: \"prev,next today\",\r\n              center: \"title\",\r\n              right: \"dayGridMonth\",\r\n            }}\r\n            initialView=\"dayGridMonth\"\r\n            editable={true}\r\n            selectable={true}\r\n            selectMirror={true}\r\n            dayMaxEvents={true}\r\n            weekends={true}\r\n            initialEvents={dataCalendar} // alternatively, use the `events` setting to fetch from a feed\r\n            events={dataCalendar}\r\n            select={(e) => {\r\n              // console.log(\"select\", e);\r\n            }}\r\n            // eventContent={renderEventContent} // custom render function\r\n            eventClick={(e) => {\r\n              // console.log(\"eventClick\", e);\r\n            }}\r\n            eventsSet={(e) => {\r\n              // console.log(\"eventsSet\", e);\r\n            }} // called after events are initialized/added/changed/removed\r\n            /* you can update a remote database when these fire:\r\n            eventAdd={function(){}}\r\n            eventChange={function(){}}\r\n            eventRemove={function(){}}\r\n            */\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ScheduleDoctor));\r\n","import axios from \"axios\";\r\n\r\nexport function listReservationOffline() {\r\n  return axios.get(`/api/v1/reservasioff`);\r\n}\r\nexport function listReservationOnline() {\r\n  return axios.get(`/api/v1/reservasion`);\r\n}\r\nexport function listAllPatient() {\r\n  return axios.get(`/api/v1/pasien?page=1&rowsPerPage=100000`);\r\n}\r\nexport function listAllPoli() {\r\n  return axios.get(`/api/v1/poli`);\r\n}\r\nexport function getPatientById(id) {\r\n  return axios.get(`/api/v1/pasien/${id}`);\r\n}\r\nexport function regisReservation(data) {\r\n  return axios.post(`/api/v1/reservasioff`, data);\r\n}\r\nexport function listPatientPagination(params) {\r\n  return axios.get(`/api/v1/pasien${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function listReservationPagination(params) {\r\n  return axios.get(`/api/v1/reservasiall${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function cancelReservation(id, data) {\r\n  return axios.put(`/api/v1/cancelreservasi/${id}`, data);\r\n}\r\nexport function getScreeningData(id) {\r\n  return axios.get(`/api/v1/screeningform/${id}`);\r\n}\r\nexport function regisScreeningData(data) {\r\n  return axios.post(`/api/v1/submitscreen`, data);\r\n}\r\nexport function listNotYetCome() {\r\n  return axios.get(`/api/v1/reservasiuncoming`);\r\n}\r\nexport function listScreening() {\r\n  return axios.get(`/api/v1/reservasitoday`);\r\n}\r\nexport function getReservationById(id) {\r\n  return axios.get(`/api/v1/reservation/${id}`);\r\n}\r\nexport function getLabsById(medical_id) {\r\n  return axios.get(`/api/v1/labs/${medical_id}`);\r\n}\r\nexport function updateLabsById(medical_id, data) {\r\n  return axios.put(`/api/v1/labs/${medical_id}`, data);\r\n}\r\nexport function regisLabs(data) {\r\n  return axios.post(`/api/v1/labs`, data);\r\n}\r\nexport function typeScreening(id) {\r\n  return axios.get(`/api/v1/formkind/${id}`);\r\n}\r\nexport function testimonialByStaf(data) {\r\n  return axios.post(`/api/v1/testimoni/staff`, data);\r\n}\r\nexport function getScheduleDoctor() {\r\n  return axios.get(`/api/v1/scheduleall`);\r\n}\r\nexport function listDoctor() {\r\n  return axios.get(`/api/v1/dokter?page=1&rowsPerPage=100000&sort=nama,asc`);\r\n}\r\nexport function createScheduleDoctor(data) {\r\n  return axios.post(`/api/v1/schedule`, data);\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport ScheduleDoctorPage from \"./ScheduleDoctorPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootScheduleDoctor(props) {\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        path=\"/registry/regis-doctor\"\r\n        component={(props) => <ScheduleDoctorPage {...props} />}\r\n        exact\r\n      />\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootScheduleDoctor));\r\n"],"sourceRoot":""}