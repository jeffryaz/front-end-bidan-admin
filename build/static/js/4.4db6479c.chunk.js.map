{"version":3,"sources":["app/components/tableCustomV1/table.js","app/modules/RegistrationPatient/ListRegistrationOnlinePage.js","app/modules/RegistrationPatient/ListRegistrationOfflinePage.js","app/modules/RegistrationPatient/ListRegistrationCheckInPage.js","app/modules/RegistrationPatient/RootRegistration.js"],"names":["injectIntl","connect","props","intl","dataHeader","handleParams","loading","err","children","countData","hecto","React","useState","numberColum","page","count","rowsPerPage","paginations","setPaginations","name","filter","value","order","status","active","length","replace","sortData","setSortData","nameStateFilter","setNameStateFilter","filterTable","setFilterTable","sort","filterSort","setFilterSort","requestFilterSort","useCallback","updateFilterTable","updateSortTable","pagination","Object","assign","filterSorts","JSON","stringify","params","URLSearchParams","toString","openFilterTable","index","idFilter","idInputFilter","document","getElementById","getAttribute","setAttribute","classList","add","remove","useEffect","Fragment","id","className","map","item","key","data-toggle","aria-expanded","onClick","title","style","paddingRight","paddingLeft","color","role","zIndex","width","padding","type","min","defaultValue","placeholder","formatMessage","property","filterTables","updateValueFilter","resetValueFilter","reset","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableSortLabel","direction","sortDatas","createSortHandler","TableBody","TablePagination","rowsPerPageOptions","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","headerTable","setLoading","data","setData","setParamsTable","setErr","useSubheader","setTitle","exact","from","to","path"],"mappings":"2SA6WeA,G,QAAAA,YAAWC,YAAQ,KAAM,KAAdA,EA5VX,SAACC,GACd,IACEC,EAQED,EARFC,KADF,EASID,EAPFE,kBAFF,MAEe,GAFf,EAGEC,EAMEH,EANFG,aAHF,EASIH,EALFI,eAJF,WASIJ,EAJFK,WALF,SAMEC,EAGEN,EAHFM,SANF,EASIN,EAFFO,iBAPF,MAOc,EAPd,IASIP,EADFQ,aARF,MAQU,EARV,EAUA,EAAsCC,IAAMC,SAAS,CACnDC,YAAa,EACbC,KAAM,EACNC,MAAON,EACPO,YAAa,KAJf,mBAAOC,EAAP,KAAoBC,EAApB,KAMA,EAAgCP,IAAMC,SAAS,CAC7CO,KACEf,EAAWgB,QACT,SAACC,GAAD,OAAiC,GAAtBA,EAAMC,MAAMC,QAAwC,GAAtBF,EAAMC,MAAME,UACrDC,OAAS,EACPrB,EACGgB,QACC,SAACC,GAAD,OACwB,GAAtBA,EAAMC,MAAMC,QAAwC,GAAtBF,EAAMC,MAAME,UAC5C,GACDL,KAAKO,QAAQ,MAAO,IACvB,GACNJ,QACElB,EAAWgB,QACT,SAACC,GAAD,OAAiC,GAAtBA,EAAMC,MAAMC,QAAwC,GAAtBF,EAAMC,MAAME,UACrDC,OAAS,IACPrB,EAAWgB,QACT,SAACC,GAAD,OAAiC,GAAtBA,EAAMC,MAAMC,QAAwC,GAAtBF,EAAMC,MAAME,UACrD,GAAGF,MAAMC,SAlBnB,mBAAOI,EAAP,KAAiBC,EAAjB,KAqBA,EAA8CjB,IAAMC,SAAS,IAA7D,mBAAOiB,EAAP,KAAwBC,EAAxB,KACA,EAAsCnB,IAAMC,SAAS,IAArD,mBAAOmB,EAAP,KAAoBC,EAApB,KACA,EAAoCrB,IAAMC,SAAS,CAAEQ,OAAQ,GAAIa,KAAM,KAAvE,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAoBzB,IAAM0B,aAC9B,SAACC,EAAmBC,GAClB,IAAIC,EAAaC,OAAOC,OAAO,GAAIzB,GAC/B0B,EAAcT,EAClBS,EAAYvB,OAASwB,KAAKC,UACxBP,GAAwCP,GAE1CY,EAAYV,KAAOW,KAAKC,UACtBN,GAAoCZ,GAEtCa,EAAW1B,KAAO0B,EAAW1B,KAAO,EACpC6B,EAAcF,OAAOC,OAAO,GAAIC,EAAaH,GAC7CL,EAAc,eAAKQ,IACnB,IAAIG,EAAS,IAAIC,gBAAgBJ,GAAaK,WAC9C3C,EAAayC,KAEf,CAACf,EAAaJ,EAAUO,EAAY/B,EAAMc,IAyCtCgC,EAAkB,SAAC9B,EAAM+B,GAC7B,IAAIC,EAAW,UAAYD,EACvBE,EAAgB,UAAYjC,EAC5BI,EAAS8B,SAASC,eAAeH,GAAUI,aAAa,UACpC,KAApB1B,GACFC,EAAmBqB,GACnBE,SAASC,eAAeH,GAAUK,aAAa,SAAU,QACzDH,SAASC,eAAeH,GAAUM,UAAUC,IAAI,SACvC7B,IAAoBsB,EACd,WAAX5B,GACF8B,SAASC,eAAeH,GAAUK,aAAa,SAAU,QACzDH,SAASC,eAAeH,GAAUM,UAAUC,IAAI,UAEhDL,SAASC,eAAeH,GAAUK,aAAa,SAAU,UACzDH,SAASC,eAAeH,GAAUM,UAAUE,OAAO,QACnDN,SAASC,eAAeF,GAAe/B,MACrCU,EAAYqB,IAAkB,KAGlCC,SAASC,eAAezB,GAAiB2B,aAAa,SAAU,UAChEH,SAASC,eAAezB,GAAiB4B,UAAUE,OAAO,QAC1D7B,EAAmBqB,GACnBE,SAASC,eAAeH,GAAUK,aAAa,SAAU,QACzDH,SAASC,eAAeH,GAAUM,UAAUC,IAAI,UAiCpD,OALA/C,IAAMiD,UAAUxB,EAAmB,IACnCzB,IAAMiD,WAAU,WACd1C,EAAe,2BAAKD,GAAN,IAAmBF,MAAON,GAAa,OACpD,CAACA,IAGF,kBAAC,IAAMoD,SAAP,KACE,6BACE,0BAAMC,GAAG,kBAAkBC,UAAU,2BACnC,0BAAMA,UAAU,wBACd,kBAAC,IAAD,CAAkBD,GAAG,wBAEvB,yBAAKC,UAAU,WACb,yBAAKA,UAAU,IACZ3D,EACEgB,QAAO,SAACC,GAAD,OAAmC,IAAxBA,EAAMD,OAAOI,UAC/BwC,KAAI,SAACC,EAAMf,GACV,OACE,yBACEgB,IAAKhB,EAAMF,WACXe,UAAU,+BACVxC,OAAO,SACPuC,GAAI,UAAYZ,GAEhB,yBACEa,UAAU,6BACVI,cAAY,WACZC,gBAAc,QACdC,QAAS,WACPpB,EAAgBgB,EAAK9C,KAAKO,QAAQ,MAAO,IAAKwB,KAGhD,8BACE,kBAAC,IAAD,CAAkBY,GAAIG,EAAKK,QAD7B,KAGA,4BAAQC,MAAO,CAAEC,aAAc,EAAGC,YAAa,IAC7C,0BACEV,UAAU,eACVD,GAAI,eAAiBZ,GAGnBnB,EACE,UAAYkC,EAAK9C,KAAKO,QAAQ,MAAO,OAK5CK,EACC,UAAYkC,EAAK9C,KAAKO,QAAQ,MAAO,KACnC,KACF,0BAAM6C,MAAO,CAAEG,MAAO,YACpB,kBAAC,IAAD,CAAkBZ,GAAG,gBAI3B,wBACEa,KAAK,OACLZ,UAAU,gBACVQ,MAAO,CAAEK,OAAQ,KAEjB,wBAAIL,MAAO,CAAEM,MAAO,IAAKC,QAAS,IAChC,yBAAKf,UAAU,YACb,yBAAKA,UAAU,cACb,2BACEgB,KAAMd,EAAK7C,OAAO2D,KAClBhB,UAAU,+BACViB,IAAI,IACJ7D,KAAM,UAAY8C,EAAK9C,KAAKO,QAAQ,MAAO,IAC3CoC,GAAI,UAAYG,EAAK9C,KAAKO,QAAQ,MAAO,IACzCuD,aACElD,EACE,UAAYkC,EAAK9C,KAAKO,QAAQ,MAAO,MAClC,GAEPwD,YAAa/E,EAAKgF,cAAc,CAC9BrB,GAAI,cAENS,MAAO,CAAEM,MAAO,QAGpB,yBAAKd,UAAU,UACb,4BACEgB,KAAK,SACLhB,UAAU,yCACVM,QAAS,YA5Gb,SAACe,EAAUlC,GACnC,IAAImC,EAAetD,EACnBsD,EAAa,UAAYD,GAAY/B,SAASC,eAC5C,UAAY8B,GACZ/D,MACFW,EAAe,eAAKqD,IACpBpC,EAAgBmC,EAAUlC,GAC1Bd,IAsG8BkD,CACErB,EAAK9C,KAAKO,QAAQ,MAAO,IACzBwB,KAIJ,kBAAC,IAAD,CAAkBY,GAAG,kBAEvB,4BACEiB,KAAK,SACLhB,UAAU,+CACVM,QAAS,YA9Gd,SAACe,GACxB,IAAIC,EAAetD,EACnBsD,EAAaD,GAAY,GACzB/B,SAASC,eAAe8B,GAAU/D,MAAQ,GAC1CW,EAAe,eAAKqD,IACpBjD,IA0G8BmD,CACE,UAAYtB,EAAK9C,KAAKO,QAAQ,MAAO,OAIzC,uBAAGqC,UAAU,yBACb,8BACE,kBAAC,IAAD,CAAkBD,GAAG,uCAUzC,4BACEiB,KAAK,SACLhB,UAAU,uDACVM,QAAS,WA1HrBrC,EAAe,IACfqB,SAASC,eAAe,mBAAmBkC,QAC3CpD,EAAkB,MA4HN,kBAAC,IAAD,CAAkB0B,GAAG,iCAK7B,6BACE,kBAAC2B,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAO7B,UAAW,SAAWrD,GAC3B,kBAACmF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACG1F,EAAW4D,KAAI,SAACC,EAAMf,GACrB,OACE,kBAAC6C,EAAA,EAAD,CACEhC,UAAU,4BACVG,IAAKhB,EAAMF,YAEViB,EAAK3C,MAAME,OACV,kBAACwE,EAAA,EAAD,CACExE,OACEG,EAASR,MAAQ8C,EAAK9C,KAAKO,QAAQ,MAAO,IAE5CuE,UAAWtE,EAASL,MAAQ,MAAQ,OACpC+C,QAAS,YAhNT,SAACJ,GACzB,IAAIiC,EAAYvE,EACZsC,EAAK9C,KAAKO,QAAQ,MAAO,MAAQwE,EAAU/E,KAC7C+E,EAAU5E,OAAS4E,EAAU5E,OAE7B4E,EAAU/E,KAAO8C,EAAK9C,KAAKO,QAAQ,MAAO,IAC1CwE,EAAU5E,OAAQ,GAEpBM,EAAY,eACPsE,IAEL9D,IAsM0B+D,CAAkBlC,KAGpB,8BACE,kBAAC,IAAD,CAAkBH,GAAIG,EAAKK,UAI/B,8BACE,kBAAC,IAAD,CAAkBR,GAAIG,EAAKK,eAQzC,kBAAC8B,EAAA,EAAD,KAAY5F,IAGd,yBAAKuD,UAAU,sBACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,+BACZzD,GACC,8BACE,uBAAGyD,UAAU,2CACb,kBAAC,IAAD,CAAkBD,GAAG,8BAGxBvD,GACC,0BAAMwD,UAAU,eACd,uBAAGA,UAAU,kCACb,kBAAC,IAAD,CAAkBD,GAAG,6BAOjC,kBAACuC,EAAA,EAAD,CACEC,mBAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACpDZ,UAAU,MACV3E,MAAOE,EAAYF,MACnBC,YAAaC,EAAYD,YACzBF,KAAMG,EAAYH,KAClByF,aAtRe,SAACC,EAAOC,GAC/B,IAAIjE,EAAavB,EACjBuB,EAAW3B,YACT4F,EAAUjE,EAAW1B,KACjB0B,EAAW3B,YAAc2B,EAAWxB,YACpCwB,EAAW3B,YAAc2B,EAAWxB,YAC1CwB,EAAW1B,KAAO2F,EAClBvF,EAAe,eACVsB,IAELJ,KA6QQsE,oBA1QsB,SAACF,GAC/B,IAAIhE,EAAavB,EACjBuB,EAAW1B,KAAO,EAClB0B,EAAWxB,YAAc2F,SAASH,EAAMI,OAAOvF,MAAO,IACtDmB,EAAW3B,YAAc,EACzBK,EAAe,eACVsB,IAELJ,e,iBCpFEyE,EAAc,CAClB,CACEvC,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,YACPnD,KAAM,WACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,oBACPnD,KAAM,sBACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAeV,CACET,MAAO,4BACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,UA2DG/E,kBAAWC,YAAQ,KAAM,KAAdA,EAtD1B,SAAoCC,GAClC,MAA8BU,oBAAS,GAAvC,mBAAON,EAAP,KAAgBwG,EAAhB,KACA,EAAwBlG,mBAAS,CAC/BmG,KAAM,GACNhG,MAAO,IAFT,mBAAOgG,EAAP,KAAaC,EAAb,KAIA,EAAsCpG,mBAAS,IAA/C,mBAAoBqG,GAApB,WACA,EAAsBrG,oBAAS,GAA/B,mBAAOL,EAAP,KAAY2G,EAAZ,KAeA,OAdkBC,cAERC,SAAS,4BAajB,kBAAC,IAAMvD,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEzD,WAAYyG,EACZxG,aAhBS,SAACyC,GAClBgE,GAAW,GACXE,EAAQ,2BACHD,GADE,IAELhG,MAAO,EACPgG,KAAM,MAERG,GAAO,GACPD,EAAenE,IASPxC,QAASA,EACTC,IAAKA,EACLE,UAAWsG,EAAKhG,MAChBL,MAAO,IAENqG,EAAKA,KAAK/C,KAAI,SAACC,EAAMf,GACpB,OACE,kBAAC4C,EAAA,EAAD,CAAU5B,IAAKhB,EAAMF,YACnB,kBAAC+C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,iBC9IZ2D,EAAc,CAClB,CACEvC,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,YACPnD,KAAM,WACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,oBACPnD,KAAM,sBACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,UA0DG/E,kBAAWC,YAAQ,KAAM,KAAdA,EArD1B,SAAqCC,GACnC,MAA8BU,oBAAS,GAAvC,mBAAON,EAAP,KAAgBwG,EAAhB,KACA,EAAwBlG,mBAAS,CAC/BmG,KAAM,GACNhG,MAAO,IAFT,mBAAOgG,EAAP,KAAaC,EAAb,KAIA,EAAsCpG,mBAAS,IAA/C,mBAAoBqG,GAApB,WACA,EAAsBrG,oBAAS,GAA/B,mBAAOL,EAAP,KAAY2G,EAAZ,KAeA,OAdkBC,cAERC,SAAS,4BAajB,kBAAC,IAAMvD,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEzD,WAAYyG,EACZxG,aAhBS,SAACyC,GAClBgE,GAAW,GACXE,EAAQ,2BACHD,GADE,IAELhG,MAAO,EACPgG,KAAM,MAERG,GAAO,GACPD,EAAenE,IASPxC,QAASA,EACTC,IAAKA,EACLE,UAAWsG,EAAKhG,MAChBL,MAAO,IAENqG,EAAKA,KAAK/C,KAAI,SAACC,EAAMf,GACpB,OACE,kBAAC4C,EAAA,EAAD,CAAU5B,IAAKhB,EAAMF,YACnB,kBAAC+C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,iBCrHZ2D,EAAc,CAClB,CACEvC,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,YACPnD,KAAM,WACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,cACPnD,KAAM,eACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,oBACPnD,KAAM,sBACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,SACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,SAGV,CACET,MAAO,4BACPnD,KAAM,SACNG,MAAO,CACLE,QAAQ,EACRD,QAAQ,GAEVH,OAAQ,CACNI,QAAQ,EACRuD,KAAM,UA2DG/E,kBAAWC,YAAQ,KAAM,KAAdA,EAtD1B,SAAqCC,GACnC,MAA8BU,oBAAS,GAAvC,mBAAON,EAAP,KAAgBwG,EAAhB,KACA,EAAwBlG,mBAAS,CAC/BmG,KAAM,GACNhG,MAAO,IAFT,mBAAOgG,EAAP,KAAaC,EAAb,KAIA,EAAsCpG,mBAAS,IAA/C,mBAAoBqG,GAApB,WACA,EAAsBrG,oBAAS,GAA/B,mBAAOL,EAAP,KAAY2G,EAAZ,KAeA,OAdkBC,cAERC,SAAS,4BAajB,kBAAC,IAAMvD,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEzD,WAAYyG,EACZxG,aAhBS,SAACyC,GAClBgE,GAAW,GACXE,EAAQ,2BACHD,GADE,IAELhG,MAAO,EACPgG,KAAM,MAERG,GAAO,GACPD,EAAenE,IASPxC,QAASA,EACTC,IAAKA,EACLE,UAAWsG,EAAKhG,MAChBL,MAAO,IAENqG,EAAKA,KAAK/C,KAAI,SAACC,EAAMf,GACpB,OACE,kBAAC4C,EAAA,EAAD,CAAU5B,IAAKhB,EAAMF,YACnB,kBAAC+C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,KACA,kBAAC6C,EAAA,EAAD,KAAY7C,EAAQ,EAApB,iBCxFHlD,sBAAWC,YAAQ,KAAM,KAAdA,EAhD1B,SAAqCC,GAMnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUmH,OAAK,EAACC,KAAK,uBAAuBC,GAAG,wBAC/C,kBAAC,IAAD,CACEC,KAAK,mCACL9B,UAAW,SAACxF,GAAD,OAAW,kBAAC,EAA+BA,IACtDmH,OAAK,IAEP,kBAAC,IAAD,CACEG,KAAK,oCACL9B,UAAW,SAACxF,GAAD,OAAW,kBAAC,EAAgCA,IACvDmH,OAAK,IAEP,kBAAC,IAAD,CACEG,KAAK,qCACL9B,UAAW,SAACxF,GAAD,OAAW,kBAAC,EAAgCA,IACvDmH,OAAK","file":"static/js/4.4db6479c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\n\r\nconst Tables = (props) => {\r\n  const {\r\n    intl,\r\n    dataHeader = [],\r\n    handleParams,\r\n    loading = false,\r\n    err = false,\r\n    children,\r\n    countData = 0,\r\n    hecto = 1,\r\n  } = props;\r\n  const [paginations, setPaginations] = React.useState({\r\n    numberColum: 0,\r\n    page: 0,\r\n    count: countData,\r\n    rowsPerPage: 10,\r\n  });\r\n  const [sortData, setSortData] = React.useState({\r\n    name:\r\n      dataHeader.filter(\r\n        (value) => value.order.status == true && value.order.active == true\r\n      ).length > 0\r\n        ? dataHeader\r\n            .filter(\r\n              (value) =>\r\n                value.order.status == true && value.order.active == true\r\n            )[0]\r\n            .name.replace(/\\s/g, \"\")\r\n        : \"\",\r\n    order:\r\n      dataHeader.filter(\r\n        (value) => value.order.status == true && value.order.active == true\r\n      ).length > 0\r\n        ? dataHeader.filter(\r\n            (value) => value.order.status == true && value.order.active == true\r\n          )[0].order.status\r\n        : true,\r\n  });\r\n  const [nameStateFilter, setNameStateFilter] = React.useState(\"\");\r\n  const [filterTable, setFilterTable] = React.useState({});\r\n  const [filterSort, setFilterSort] = React.useState({ filter: {}, sort: {} });\r\n\r\n  const requestFilterSort = React.useCallback(\r\n    (updateFilterTable, updateSortTable) => {\r\n      let pagination = Object.assign({}, paginations);\r\n      let filterSorts = filterSort;\r\n      filterSorts.filter = JSON.stringify(\r\n        updateFilterTable ? updateFilterTable : filterTable\r\n      );\r\n      filterSorts.sort = JSON.stringify(\r\n        updateSortTable ? updateSortTable : sortData\r\n      );\r\n      pagination.page = pagination.page + 1;\r\n      filterSorts = Object.assign({}, filterSorts, pagination);\r\n      setFilterSort({ ...filterSorts });\r\n      let params = new URLSearchParams(filterSorts).toString();\r\n      handleParams(params);\r\n    },\r\n    [filterTable, sortData, filterSort, intl, paginations]\r\n  );\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    let pagination = paginations;\r\n    pagination.numberColum =\r\n      newPage > pagination.page\r\n        ? pagination.numberColum + pagination.rowsPerPage\r\n        : pagination.numberColum - pagination.rowsPerPage;\r\n    pagination.page = newPage;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    let pagination = paginations;\r\n    pagination.page = 0;\r\n    pagination.rowsPerPage = parseInt(event.target.value, 10);\r\n    pagination.numberColum = 0;\r\n    setPaginations({\r\n      ...pagination,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const createSortHandler = (item) => {\r\n    let sortDatas = sortData;\r\n    if (item.name.replace(/\\s/g, \"\") === sortDatas.name) {\r\n      sortDatas.order = !sortDatas.order;\r\n    } else {\r\n      sortDatas.name = item.name.replace(/\\s/g, \"\");\r\n      sortDatas.order = true;\r\n    }\r\n    setSortData({\r\n      ...sortDatas,\r\n    });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const openFilterTable = (name, index) => {\r\n    let idFilter = \"filter-\" + index;\r\n    let idInputFilter = \"filter-\" + name;\r\n    let status = document.getElementById(idFilter).getAttribute(\"status\");\r\n    if (nameStateFilter === \"\") {\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    } else if (nameStateFilter === idFilter) {\r\n      if (status === \"closed\") {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n        document.getElementById(idFilter).classList.add(\"open\");\r\n      } else {\r\n        document.getElementById(idFilter).setAttribute(\"status\", \"closed\");\r\n        document.getElementById(idFilter).classList.remove(\"open\");\r\n        document.getElementById(idInputFilter).value =\r\n          filterTable[idInputFilter] || \"\";\r\n      }\r\n    } else {\r\n      document.getElementById(nameStateFilter).setAttribute(\"status\", \"closed\");\r\n      document.getElementById(nameStateFilter).classList.remove(\"open\");\r\n      setNameStateFilter(idFilter);\r\n      document.getElementById(idFilter).setAttribute(\"status\", \"open\");\r\n      document.getElementById(idFilter).classList.add(\"open\");\r\n    }\r\n  };\r\n\r\n  const updateValueFilter = (property, index) => {\r\n    let filterTables = filterTable;\r\n    filterTables[\"filter-\" + property] = document.getElementById(\r\n      \"filter-\" + property\r\n    ).value;\r\n    setFilterTable({ ...filterTables });\r\n    openFilterTable(property, index);\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetValueFilter = (property) => {\r\n    let filterTables = filterTable;\r\n    filterTables[property] = \"\";\r\n    document.getElementById(property).value = \"\";\r\n    setFilterTable({ ...filterTables });\r\n    requestFilterSort();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilterTable({});\r\n    document.getElementById(\"filter-form-all\").reset();\r\n    requestFilterSort({});\r\n  };\r\n\r\n  React.useEffect(requestFilterSort, []);\r\n  React.useEffect(() => {\r\n    setPaginations({ ...paginations, count: countData || 0 });\r\n  }, [countData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <form id=\"filter-form-all\" className=\"panel-filter-table mb-1\">\r\n          <span className=\"mr-2 mt-2 float-left\">\r\n            <FormattedMessage id=\"LABEL.FILTER.TABLE\" />\r\n          </span>\r\n          <div className=\"d-block\">\r\n            <div className=\"\">\r\n              {dataHeader\r\n                .filter((value) => value.filter.active === true)\r\n                .map((item, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index.toString()}\r\n                      className=\"btn-group hover-filter-table\"\r\n                      status=\"closed\"\r\n                      id={\"filter-\" + index}\r\n                    >\r\n                      <div\r\n                        className=\"btn btn-sm dropdown-toggle\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-expanded=\"false\"\r\n                        onClick={() => {\r\n                          openFilterTable(item.name.replace(/\\s/g, \"\"), index);\r\n                        }}\r\n                      >\r\n                        <span>\r\n                          <FormattedMessage id={item.title} />:\r\n                        </span>\r\n                        <strong style={{ paddingRight: 1, paddingLeft: 1 }}>\r\n                          <span\r\n                            className=\"filter-label\"\r\n                            id={\"filter-span-\" + index}\r\n                          >\r\n                            {\r\n                              filterTable[\r\n                                \"filter-\" + item.name.replace(/\\s/g, \"\")\r\n                              ]\r\n                            }\r\n                          </span>\r\n                        </strong>\r\n                        {filterTable[\r\n                          \"filter-\" + item.name.replace(/\\s/g, \"\")\r\n                        ] ? null : (\r\n                          <span style={{ color: \"#777777\" }}>\r\n                            <FormattedMessage id=\"LABEL.ALL\" />\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <ul\r\n                        role=\"menu\"\r\n                        className=\"dropdown-menu\"\r\n                        style={{ zIndex: 90 }}\r\n                      >\r\n                        <li style={{ width: 380, padding: 5 }}>\r\n                          <div className=\"clearfix\">\r\n                            <div className=\"float-left\">\r\n                              <input\r\n                                type={item.filter.type}\r\n                                className=\"form-control form-control-sm\"\r\n                                min=\"0\"\r\n                                name={\"filter-\" + item.name.replace(/\\s/g, \"\")}\r\n                                id={\"filter-\" + item.name.replace(/\\s/g, \"\")}\r\n                                defaultValue={\r\n                                  filterTable[\r\n                                    \"filter-\" + item.name.replace(/\\s/g, \"\")\r\n                                  ] || \"\"\r\n                                }\r\n                                placeholder={intl.formatMessage({\r\n                                  id: \"LABEL.ALL\",\r\n                                })}\r\n                                style={{ width: 200 }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-left btn btn-sm btn-primary\"\r\n                                onClick={() => {\r\n                                  updateValueFilter(\r\n                                    item.name.replace(/\\s/g, \"\"),\r\n                                    index\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <FormattedMessage id=\"LABEL.UPDATE\" />\r\n                              </button>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"mx-2 float-right btn btn-sm btn-light d-flex\"\r\n                                onClick={() => {\r\n                                  resetValueFilter(\r\n                                    \"filter-\" + item.name.replace(/\\s/g, \"\")\r\n                                  );\r\n                                }}\r\n                              >\r\n                                <i className=\"fas fa-redo fa-right\"></i>\r\n                                <span>\r\n                                  <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n                                </span>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  );\r\n                })}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-sm btn-danger ml-2 mt-2 button-filter-submit\"\r\n                onClick={() => {\r\n                  resetFilter();\r\n                }}\r\n              >\r\n                <FormattedMessage id=\"LABEL.FILTER.RESET.TABLE\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <div>\r\n          <TableContainer component={Paper}>\r\n            <Table className={\"hecto-\" + hecto}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {dataHeader.map((item, index) => {\r\n                    return (\r\n                      <TableCell\r\n                        className=\"bg-primary text-uppercase\"\r\n                        key={index.toString()}\r\n                      >\r\n                        {item.order.active ? (\r\n                          <TableSortLabel\r\n                            active={\r\n                              sortData.name == item.name.replace(/\\s/g, \"\")\r\n                            }\r\n                            direction={sortData.order ? \"asc\" : \"desc\"}\r\n                            onClick={() => {\r\n                              createSortHandler(item);\r\n                            }}\r\n                          >\r\n                            <span>\r\n                              <FormattedMessage id={item.title} />\r\n                            </span>\r\n                          </TableSortLabel>\r\n                        ) : (\r\n                          <span>\r\n                            <FormattedMessage id={item.title} />\r\n                          </span>\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{children}</TableBody>\r\n            </Table>\r\n\r\n            <div className=\"table-loading-data\">\r\n              <div className=\"text-center font-weight-bold py-5\">\r\n                <div className=\"table-loading-data-potition\">\r\n                  {loading && (\r\n                    <span>\r\n                      <i className=\"fas fa-spinner fa-pulse text-dark mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.TABLE.WAITING_DATA\" />\r\n                    </span>\r\n                  )}\r\n                  {err && (\r\n                    <span className=\"text-danger\">\r\n                      <i className=\"far fa-frown text-danger mr-1\"></i>\r\n                      <FormattedMessage id=\"LABEL.ERROR_REQUEST\" />\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[10, 25, 50, 75, 100, 250, 500, 1000]}\r\n            component=\"div\"\r\n            count={paginations.count}\r\n            rowsPerPage={paginations.rowsPerPage}\r\n            page={paginations.page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default injectIntl(connect(null, null)(Tables));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"contract\",\r\n  //   name: \"contract_no\",\r\n  //   order: {\r\n  //     active: true,\r\n  //     status: true,\r\n  //   },\r\n  //   filter: {\r\n  //     active: true,\r\n  //     type: \"text\",\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n    name: \"action\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationOnlinePage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationOnlinePage));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationOfflinePage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationOfflinePage));\r\n","import React, {\r\n  useState,\r\n  // useEffect,\r\n  // useCallback\r\n} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  // FormattedMessage,\r\n  injectIntl,\r\n} from \"react-intl\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"Kode pasien\",\r\n    name: \"code_patient\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"No Daftar\",\r\n    name: \"no_regis\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Nama Pasien\",\r\n    name: \"name_patient\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tanggal Reservasi\",\r\n    name: \"reservation_created\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Tujuan\",\r\n    name: \"tujuan\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    name: \"status\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n    name: \"action\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListRegistrationCheckInPage(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [paramsTable, setParamsTable] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  suhbeader.setTitle(\"Daftar Resgitrasi Online\");\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    setParamsTable(params);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                  <TableCell>{index + 1}.</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListRegistrationCheckInPage));\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { useSubheader } from \"../../../../_metronic/layout\";\r\nimport ListRegistrationOnlinePage from \"./ListRegistrationOnlinePage\";\r\nimport ListRegistrationOfflinePage from \"./ListRegistrationOfflinePage\";\r\nimport ListRegistrationCheckInPage from \"./ListRegistrationCheckInPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootClientInvoiceMonitoring(props) {\r\n  // const suhbeader = useSubheader();\r\n  // const { intl } = props;\r\n  // suhbeader.setTitle(intl.formatMessage({\r\n  //   id: \"MENU.DELIVERY_MONITORING.LIST_CONTRACT_PO\",\r\n  // }));\r\n  return (\r\n    <Switch>\r\n      <Redirect exact from=\"/registry/regis-page\" to=\"/registry/dashboard\" />\r\n      <Route\r\n        path=\"/registry/regis-page/list-online\"\r\n        component={(props) => <ListRegistrationOnlinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-offline\"\r\n        component={(props) => <ListRegistrationOfflinePage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/list-check-in\"\r\n        component={(props) => <ListRegistrationCheckInPage {...props} />}\r\n        exact\r\n      />\r\n      {/* <Route\r\n        path=\"/registry/regis-page/contract/:contract\"\r\n        component={(props) => <ListTermContract {...props} />}\r\n        exact={true}\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/contract\"\r\n        component={DashboardListContract}\r\n      />\r\n      <Route path=\"/registry/regis-page/spt/:id\" component={ItemSpt} />\r\n      <Route path=\"/registry/regis-page/spt\" component={DashboardListSpt} />\r\n      <Route\r\n        path=\"/registry/regis-page/mismatch\"\r\n        component={DashboardListMismatch}\r\n      />\r\n      <Route path=\"/registry/regis-page/bkb\" component={DashboardListBkb} />\r\n      <Route path=\"/registry/regis-page/dashboard\" component={Dashboard} />\r\n      <Route\r\n        path=\"/registry/regis-page/invoice_document\"\r\n        component={DashboardListInvoice}\r\n      /> */}\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootClientInvoiceMonitoring));\r\n"],"sourceRoot":""}