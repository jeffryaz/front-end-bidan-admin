{"version":3,"sources":["app/components/buttonAction/ButtonAction.js","app/components/tableCustomV1/tableOnly.js","app/modules/Screening/_redux/CrudScreening.js","app/modules/Screening/ListScreeningPage.js","app/modules/Screening/ScreeningPatientPage.js","app/modules/Screening/RootScreening.js"],"names":["CustomTooltip","withStyles","theme","tooltip","boxShadow","shadows","fontSize","marginTop","Tooltip","ButtonAction","data","handleAction","ops","label","exclude","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","handleClose","handleChange","useCallback","type","listUsed","title","id","placement","aria-label","aria-controls","aria-haspopup","onClick","style","margin","padding","keepMounted","onClose","PaperProps","width","marginLeft","filter","el","includes","map","to","key","url","className","icon","primary","disabled","injectIntl","connect","props","intl","dataHeader","loading","err","children","hecto","Fragment","component","Paper","item","index","toString","updateLabsById","medical_id","axios","put","regisLabs","post","headerTable","setLoading","setData","dataTemp","setDataTemp","initialValues","setInitialValues","loadingRegis","setLoadingRegis","dialogLab","setDialogLab","dialogTypeScreening","setDialogTypeScreening","dataTypeScreening","setDataTypeScreening","dataTypeScreening_","setDataTypeScreening_","suhbeader","useSubheader","useLayoutEffect","setBreadcrumbs","pathname","formatMessage","setTitle","Schema","Yup","shape","hb","required","hbsag","hiv","sifilis","asam_urat","kolesterol","gol_dar","pp_test","protein_urine","ph","glukosa","formik","useFormik","validationSchema","onSubmit","values","a","setStatus","setSubmitting","lab_id","then","result","callApiListNotCome","resetForm","MODAL","showSnackbar","catch","console","log","get","useEffect","callApiLabs","setValues","response","messages","callApiTypeScreening","poli_id","Dialog","maxWidth","fullWidth","aria-labelledby","aria-describedby","DialogTitle","DialogContent","pasien_id","kind_nm","DialogActions","autoComplete","handleSubmit","value","kode_pasien","onChange","nama","code_reg","poli","getFieldProps","TableRow","TableCell","tgl_book","status","dataCheckIn","setDataCheckIn","dataScreeningLoading","setDataScreeningLoading","dataScreening","setDataScreening","dataScreeningErr","setDataScreeningErr","patient_id","match","params","reservasi_id","client","useSelector","clientMqtt","shallowEqual","mqttPublish","topic","publish","qos","payload","topicCallDoctor","callDoctor","qosCallDoctor","payloadCallDoctor","error","history","goBack","e","preventDefault","screenitems","i","length","val_desc","document","getElementById","join","medkind_id","medform_id","trim","push","regisScreeningData","window","moment","Date","format","datatype","dokter_only","rows","exact","from","path"],"mappings":"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","file":"static/js/15.a1321cfc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  IconButton,\r\n  Tooltip,\r\n  withStyles,\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { MoreVert } from \"@material-ui/icons\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CustomTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: \"0.875rem\",\r\n    marginTop: \"0.25rem\",\r\n  },\r\n}))(Tooltip);\r\n\r\nexport default function ButtonAction({\r\n  data,\r\n  handleAction,\r\n  ops,\r\n  label = null,\r\n  exclude = [],\r\n}) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n  const handleChange = React.useCallback(\r\n    (type, data) => {\r\n      if (typeof handleAction === \"function\") handleAction(type, data);\r\n      handleClose();\r\n    },\r\n    [handleAction, handleClose]\r\n  );\r\n\r\n  let listUsed = ops;\r\n\r\n  return (\r\n    <div>\r\n      {label ? (\r\n        <CustomTooltip\r\n          title={<FormattedMessage id={label} />}\r\n          placement=\"bottom\"\r\n        >\r\n          <IconButton\r\n            aria-label=\"More\"\r\n            aria-controls=\"long-menu\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleClick}\r\n          >\r\n            <MoreVert />\r\n          </IconButton>\r\n        </CustomTooltip>\r\n      ) : (\r\n        <IconButton\r\n          aria-label=\"More\"\r\n          aria-controls=\"long-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n          style={{\r\n            margin: \"-6px 0px\",\r\n            padding: 8,\r\n          }}\r\n        >\r\n          <MoreVert />\r\n        </IconButton>\r\n      )}\r\n      <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          style: {\r\n            width: 300,\r\n            marginLeft: -50,\r\n          },\r\n        }}\r\n      >\r\n        {listUsed\r\n          .filter((el) => !exclude.includes(el.type))\r\n          .map((el, id) => {\r\n            if (el.to) {\r\n              return (\r\n                <Link key={id} to={el.to?.url} style={el.to?.style}>\r\n                  <MenuItem>\r\n                    <ListItemIcon>\r\n                      <i className={el.icon}></i>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={<FormattedMessage id={el.label} />}\r\n                    />\r\n                  </MenuItem>\r\n                </Link>\r\n              );\r\n            } else {\r\n              return (\r\n                <MenuItem\r\n                  key={id}\r\n                  onClick={() => handleChange(el.type, data)}\r\n                  disabled={el.disabled}\r\n                >\r\n                  <ListItemIcon>\r\n                    <i className={el.icon}></i>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={<FormattedMessage id={el.label} />} />\r\n                </MenuItem>\r\n              );\r\n            }\r\n          })}\r\n      </Menu>\r\n    </div>\r\n    // </LightTooltip>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\n\r\nconst TableOnly = (props) => {\r\n  const {\r\n    intl,\r\n    dataHeader = [],\r\n    loading = false,\r\n    err = false,\r\n    children,\r\n    hecto = 1,\r\n  } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <TableContainer component={Paper}>\r\n          <Table className={\"hecto-\" + hecto}>\r\n            <TableHead>\r\n              <TableRow>\r\n                {dataHeader.map((item, index) => {\r\n                  return (\r\n                    <TableCell\r\n                      className=\"bg-primary text-uppercase\"\r\n                      key={index.toString()}\r\n                    >\r\n                      <span>\r\n                        <FormattedMessage id={item.title} />\r\n                      </span>\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>{children}</TableBody>\r\n          </Table>\r\n\r\n          <div className=\"table-loading-data\">\r\n            <div className=\"text-center font-weight-bold py-5\">\r\n              <div className=\"table-loading-data-potition\">\r\n                {loading && (\r\n                  <span>\r\n                    <i className=\"fas fa-spinner fa-pulse text-dark mr-1\"></i>\r\n                    <FormattedMessage id=\"LABEL.TABLE.WAITING_DATA\" />\r\n                  </span>\r\n                )}\r\n                {err && (\r\n                  <span className=\"text-danger\">\r\n                    <i className=\"far fa-frown text-danger mr-1\"></i>\r\n                    <FormattedMessage id=\"LABEL.ERROR_REQUEST\" />\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TableContainer>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default injectIntl(connect(null, null)(TableOnly));\r\n","import axios from \"axios\";\r\n\r\nexport function listReservationOffline() {\r\n  return axios.get(`/api/v1/reservasioff`);\r\n}\r\nexport function listReservationOnline() {\r\n  return axios.get(`/api/v1/reservasion`);\r\n}\r\nexport function listAllPatient() {\r\n  return axios.get(`/api/v1/pasien?page=1&rowsPerPage=100000`);\r\n}\r\nexport function listAllPoli() {\r\n  return axios.get(`/api/v1/poli`);\r\n}\r\nexport function getPatientById(id) {\r\n  return axios.get(`/api/v1/pasien/${id}`);\r\n}\r\nexport function regisReservation(data) {\r\n  return axios.post(`/api/v1/reservasioff`, data);\r\n}\r\nexport function listPatientPagination(params) {\r\n  return axios.get(`/api/v1/pasien${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function listReservationPagination(params) {\r\n  return axios.get(`/api/v1/reservasiall${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function cancelReservation(id, data) {\r\n  return axios.put(`/api/v1/cancelreservasi/${id}`, data);\r\n}\r\nexport function getScreeningData(id) {\r\n  return axios.get(`/api/v1/screeningform/${id}`);\r\n}\r\nexport function regisScreeningData(data) {\r\n  return axios.post(`/api/v1/submitscreen`, data);\r\n}\r\nexport function listNotYetCome() {\r\n  return axios.get(`/api/v1/reservasiuncoming`);\r\n}\r\nexport function listScreening() {\r\n  return axios.get(`/api/v1/reservasitoday`);\r\n}\r\nexport function getReservationById(id) {\r\n  return axios.get(`/api/v1/reservation/${id}`);\r\n}\r\nexport function getLabsById(medical_id) {\r\n  return axios.get(`/api/v1/labs/${medical_id}`);\r\n}\r\nexport function updateLabsById(medical_id, data) {\r\n  return axios.put(`/api/v1/labs/${medical_id}`, data);\r\n}\r\nexport function regisLabs(data) {\r\n  return axios.post(`/api/v1/labs`, data);\r\n}\r\nexport function typeScreening(id) {\r\n  return axios.get(`/api/v1/formkind/${id}`);\r\n}\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport TableOnly from \"../../components/tableCustomV1/tableOnly\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n  TableRow,\r\n  TableCell,\r\n} from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport {\r\n  listScreening,\r\n  getLabsById,\r\n  updateLabsById,\r\n  regisLabs,\r\n  typeScreening,\r\n} from \"./_redux/CrudScreening\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport ButtonAction from \"../../components/buttonAction/ButtonAction\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.PATIENT_CODE\",\r\n  },\r\n  {\r\n    title: \"LABEL.REGISTRATION_NO\",\r\n  },\r\n  {\r\n    title: \"LABEL.PATIENT_NAME\",\r\n  },\r\n  {\r\n    title: \"LABEL.DATE_OF_VISIT\",\r\n  },\r\n  {\r\n    title: \"LABEL.POLI\",\r\n  },\r\n  {\r\n    title: \"LABEL.STATUS\",\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n  },\r\n];\r\n\r\nfunction ListScreeningPage(props) {\r\n  const { intl } = props;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [dataTemp, setDataTemp] = useState({});\r\n  const [initialValues, setInitialValues] = useState({});\r\n  const [loadingRegis, setLoadingRegis] = useState(false);\r\n  const [dialogLab, setDialogLab] = useState(false);\r\n  const [dialogTypeScreening, setDialogTypeScreening] = useState(false);\r\n  const [dataTypeScreening, setDataTypeScreening] = useState([]);\r\n  const [dataTypeScreening_, setDataTypeScreening_] = useState({});\r\n  const suhbeader = useSubheader();\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/registry/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: \"/registry/screening/list\",\r\n        title: intl.formatMessage({ id: \"LABEL.SCREENING_LIST\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.SCREENING_LIST\" }));\r\n  }, []);\r\n\r\n  const Schema = Yup.object().shape({\r\n    hb: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    hbsag: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    hiv: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    sifilis: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    asam_urat: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    kolesterol: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    gol_dar: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    pp_test: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    protein_urine: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    ph: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    glukosa: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: Schema,\r\n    onSubmit: async (values, { setStatus, setSubmitting }) => {\r\n      var data = values;\r\n      data.medical_id = dataTemp.medical_id;\r\n      setLoadingRegis(true);\r\n      if (dataTemp.lab_id) {\r\n        updateLabsById(dataTemp.medical_id, data)\r\n          .then((result) => {\r\n            callApiListNotCome();\r\n            setLoadingRegis(false);\r\n            setInitialValues({});\r\n            formik.resetForm();\r\n            MODAL.showSnackbar(\r\n              intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n              \"success\"\r\n            );\r\n            setDialogLab(false);\r\n          })\r\n          .catch((err) => {\r\n            setLoadingRegis(false);\r\n            MODAL.showSnackbar(\r\n              intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" })\r\n            );\r\n          });\r\n      } else {\r\n        regisLabs(data)\r\n          .then((result) => {\r\n            callApiListNotCome();\r\n            setLoadingRegis(false);\r\n            setInitialValues({});\r\n            formik.resetForm();\r\n            MODAL.showSnackbar(\r\n              intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n              \"success\"\r\n            );\r\n            setDialogLab(false);\r\n          })\r\n          .catch((err) => {\r\n            setLoadingRegis(false);\r\n            MODAL.showSnackbar(\r\n              intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" })\r\n            );\r\n          });\r\n      }\r\n      console.log(\"values\", values);\r\n    },\r\n  });\r\n\r\n  const callApiListNotCome = () => {\r\n    setLoading(true);\r\n    listScreening()\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListNotCome, []);\r\n\r\n  const callApiLabs = () => {\r\n    if (dataTemp.lab_id) {\r\n      getLabsById(dataTemp.medical_id)\r\n        .then((result) => {\r\n          var data = {\r\n            hb: result.data.data.hb,\r\n            hbsag: result.data.data.hbsag,\r\n            hiv: result.data.data.hiv,\r\n            sifilis: result.data.data.sifilis,\r\n            asam_urat: result.data.data.asam_urat,\r\n            kolesterol: result.data.data.kolesterol,\r\n            gol_dar: result.data.data.gol_dar,\r\n            pp_test: result.data.data.pp_test,\r\n            protein_urine: result.data.data.protein_urine,\r\n            ph: result.data.data.ph,\r\n            glukosa: result.data.data.glukosa,\r\n          };\r\n          formik.setValues(data);\r\n        })\r\n        .catch((err) => {\r\n          MODAL.showSnackbar(err.response?.data.messages);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(callApiLabs, [dataTemp]);\r\n\r\n  function callApiTypeScreening(poli_id) {\r\n    typeScreening(poli_id)\r\n      .then((result) => {\r\n        setDataTypeScreening(result.data.data);\r\n        setDialogTypeScreening(true);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        open={dialogTypeScreening}\r\n        // keepMounted\r\n        maxWidth=\"xs\"\r\n        fullWidth={true}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle>\r\n          <FormattedMessage id=\"LABEL.TYPE_SCREENING\" />\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          {dataTypeScreening.map((item, index) => {\r\n            return (\r\n              <Link\r\n                key={index.toString()}\r\n                className=\"btn btn-primary  w-100 my-2\"\r\n                to={`/registry/screening/patient/${dataTypeScreening_.pasien_id}/${item.id}/${dataTypeScreening_.id}`}\r\n              >\r\n                {item.kind_nm}\r\n              </Link>\r\n            );\r\n          })}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setDialogTypeScreening(false);\r\n            }}\r\n            className=\"btn btn-danger\"\r\n          >\r\n            <FormattedMessage id=\"LABEL.CANCEL\" />\r\n          </button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Dialog\r\n        open={dialogLab}\r\n        // keepMounted\r\n        maxWidth=\"lg\"\r\n        fullWidth={true}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle>\r\n          <FormattedMessage id=\"LABEL.LAB_RESULT\" />\r\n        </DialogTitle>\r\n        <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n          <DialogContent>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-3 col-form-label\">\r\n                    <FormattedMessage id=\"LABEL.PATIENT_CODE\" />\r\n                  </label>\r\n                  <div className=\"col-sm-9\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataTemp?.kode_pasien}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-3 col-form-label\">\r\n                    <FormattedMessage id=\"LABEL.PATIENT_NAME\" />\r\n                  </label>\r\n                  <div className=\"col-sm-9\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataTemp?.nama}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-3 col-form-label\">\r\n                    <FormattedMessage id=\"LABEL.REGISTRATION_NO\" />\r\n                  </label>\r\n                  <div className=\"col-sm-9\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataTemp?.code_reg}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-3 col-form-label\">\r\n                    <FormattedMessage id=\"LABEL.POLI\" />\r\n                  </label>\r\n                  <div className=\"col-sm-9\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataTemp?.poli}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Hemoglobin (HB)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"hb\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Hepatitis B Surface Antigen (HBsAg)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"hbsag\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Human Immunodeficiency Virus (HIV)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"hiv\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Raja Singa (Sifilis)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"sifilis\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Asam Urat</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"asam_urat\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Kolestrol</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"kolesterol\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Gelongan Darah</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"gol_dar\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Plano Test (PP Test)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"pp_test\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Protein Urine</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"protein_urine\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>PH</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"ph\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label>Gula Darah (Glucose)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    required\r\n                    disabled={loadingRegis}\r\n                    {...formik.getFieldProps(\"glukosa\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setDialogLab(false);\r\n                formik.resetForm();\r\n              }}\r\n              className=\"btn btn-danger\"\r\n              disabled={loadingRegis}\r\n            >\r\n              <FormattedMessage id=\"LABEL.CANCEL\" />\r\n            </button>\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {loadingRegis ? (\r\n                <i className=\"fas fa-spinner fa-pulse px-2\"></i>\r\n              ) : (\r\n                <i className=\"fas fa-save ml-2\"></i>\r\n              )}\r\n              {loadingRegis ? (\r\n                <FormattedMessage id=\"LABEL.WAITING\" />\r\n              ) : (\r\n                <FormattedMessage id=\"LABEL.SAVE\" />\r\n              )}\r\n            </button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n      <Card>\r\n        <CardBody>\r\n          <TableOnly dataHeader={headerTable} loading={loading} hecto={10}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{item.kode_pasien}</TableCell>\r\n                  <TableCell>{item.code_reg}</TableCell>\r\n                  <TableCell>{item.nama}</TableCell>\r\n                  <TableCell>{item.tgl_book}</TableCell>\r\n                  <TableCell>{item.poli}</TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" ? (\r\n                      <FormattedMessage id=\"LABEL.BOOKING\" />\r\n                    ) : item.status === \"2\" ? (\r\n                      <FormattedMessage id=\"LABEL.CANCELED\" />\r\n                    ) : item.status === \"3\" ? (\r\n                      <FormattedMessage id=\"LABEL.CHECKIN_SCREENING\" />\r\n                    ) : item.status === \"4\" ? (\r\n                      <FormattedMessage id=\"LABEL.POLI_PROCESS\" />\r\n                    ) : item.status === \"5\" ? (\r\n                      <FormattedMessage id=\"LABEL.PHARMACIST\" />\r\n                    ) : item.status === \"6\" ? (\r\n                      <FormattedMessage id=\"LABEL.PAYMENT\" />\r\n                    ) : (\r\n                      <FormattedMessage id=\"LABEL.FINISH\" />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" && (\r\n                      <button\r\n                        className=\"btn btn-warning\"\r\n                        onClick={async () => {\r\n                          callApiTypeScreening(item.poli_id);\r\n                          setDataTypeScreening_(item);\r\n                        }}\r\n                      >\r\n                        <FormattedMessage id=\"LABEL.SCREENING\" />\r\n                      </button>\r\n                    )}\r\n                    {item.status === \"4\" && (\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => {\r\n                          setDataTemp(item);\r\n                          setDialogLab(true);\r\n                          if (item.lab_id) {\r\n                            callApiLabs();\r\n                          }\r\n                        }}\r\n                      >\r\n                        {item.lab_id ? (\r\n                          <i className=\"fas fa-edit pr-2\"></i>\r\n                        ) : (\r\n                          <i className=\"fas fa-pen pr-2\"></i>\r\n                        )}\r\n                        <FormattedMessage id=\"LABEL.LAB_RESULT\" />\r\n                      </button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableOnly>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListScreeningPage));\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n  CardHeaderTitle,\r\n} from \"../../../_metronic/_partials/controls\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport {\r\n  regisScreeningData,\r\n  getScreeningData,\r\n  getReservationById,\r\n} from \"./_redux/CrudScreening\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport { publish, callDoctor } from \"../../../redux/MqttOptions\";\r\n\r\nfunction ScreeningPatientPage(props) {\r\n  const { intl } = props;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const suhbeader = useSubheader();\r\n  const [dataCheckIn, setDataCheckIn] = useState({});\r\n  const [dataScreeningLoading, setDataScreeningLoading] = useState(false);\r\n  const [dataScreening, setDataScreening] = useState([]);\r\n  const [dataScreeningErr, setDataScreeningErr] = useState(false);\r\n  const patient_id = props.match.params.patient_id;\r\n  const poli = props.match.params.poli;\r\n  const reservasi_id = props.match.params.reservasi_id;\r\n  const client = useSelector(\r\n    ({ clientMqtt }) => clientMqtt.client,\r\n    shallowEqual\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/registry/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: \"/registry/screening/list\",\r\n        title: intl.formatMessage({ id: \"LABEL.SCREENING_LIST\" }),\r\n      },\r\n      {\r\n        pathname: `/registry/screening/patient/${patient_id}/${poli}/${reservasi_id}`,\r\n        title: intl.formatMessage({ id: \"LABEL.PATIENT_SCREENING\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.PATIENT_SCREENING\" }));\r\n  }, []);\r\n\r\n  const saveScreening = (e) => {\r\n    e.preventDefault();\r\n    setDataScreeningLoading(true);\r\n    var screenitems = [];\r\n    for (let i = 0; i < dataScreening.length; i++) {\r\n      var val_desc = document.getElementById(\r\n        (dataScreening[i].nama + dataScreening[i].id)\r\n          .match(/[a-zA-Z0-9]+/g)\r\n          .join(\"\")\r\n      ).value;\r\n      var item = {\r\n        medkind_id: dataScreening[i].medkind_id,\r\n        medform_id: dataScreening[i].medform_id,\r\n        val_desc,\r\n      };\r\n      if (val_desc.trim().length != 0) screenitems.push(item);\r\n    }\r\n    var dataReq = {\r\n      reservasi_id,\r\n      screenitems,\r\n    };\r\n    regisScreeningData(dataReq)\r\n      .then((result) => {\r\n        setDataScreeningLoading(false);\r\n        setDataScreening([]);\r\n        MODAL.showSnackbar(\r\n          intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n          \"success\",\r\n          3000\r\n        );\r\n        mqttPublish();\r\n        props.history.goBack();\r\n      })\r\n      .catch((err) => {\r\n        setDataScreeningLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  const mqttPublish = () => {\r\n    if (client) {\r\n      const { topic, qos, payload } = publish;\r\n      const { topicCallDoctor, qosCallDoctor, payloadCallDoctor } = callDoctor;\r\n      client.publish(topic, payload, { qos }, (error) => {\r\n        if (error) {\r\n          console.log(\"Publish error: \", error);\r\n        }\r\n      });\r\n      client.publish(\r\n        topicCallDoctor,\r\n        payloadCallDoctor,\r\n        { qosCallDoctor },\r\n        (error) => {\r\n          if (error) {\r\n            console.log(\"Publish error: \", error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const callApiGetScreeningData = () => {\r\n    setDataScreeningErr(false);\r\n    setDataScreeningLoading(true);\r\n    setDataScreening([]);\r\n    getScreeningData(poli)\r\n      .then((result) => {\r\n        setDataScreeningLoading(false);\r\n        setDataScreening(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setDataScreeningErr(true);\r\n        setDataScreeningLoading(false);\r\n        MODAL.showSnackbar(err.response.data.messages);\r\n      });\r\n  };\r\n\r\n  useEffect(callApiGetScreeningData, []);\r\n\r\n  const callApiGetPasienById = () => {\r\n    getReservationById(reservasi_id)\r\n      .then((result) => {\r\n        setDataCheckIn(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(err.response.data.messages);\r\n      });\r\n  };\r\n\r\n  useEffect(callApiGetPasienById, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"card-title\">\r\n            <CardHeaderTitle>\r\n              <FormattedMessage id=\"LABEL.SCREENING\" />\r\n            </CardHeaderTitle>\r\n            {dataScreeningLoading && (\r\n              <span className=\"text-danger\">\r\n                <i className=\"fas fa-spinner fa-pulse px-2\"></i>\r\n                <FormattedMessage id=\"LABEL.WAITING\" />\r\n              </span>\r\n            )}\r\n          </div>\r\n          <CardHeaderToolbar>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger mx-1\"\r\n              onClick={() => {\r\n                props.history.goBack();\r\n              }}\r\n            >\r\n              <FormattedMessage id=\"LABEL.CANCEL\" />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={`btn btn-primary mx-1 ${\r\n                dataScreeningErr ? \"d-none\" : \"\"\r\n              }`}\r\n              disabled={dataScreeningLoading}\r\n              onClick={saveScreening}\r\n            >\r\n              <FormattedMessage id=\"LABEL.SAVE\" />\r\n              <i className=\"fas fa-save ml-2\"></i>\r\n            </button>\r\n          </CardHeaderToolbar>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <form autoComplete=\"off\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-4\">\r\n                    <FormattedMessage id=\"LABEL.PATIENT_CODE\" />\r\n                  </label>\r\n                  <div className=\"col-sm-8\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataCheckIn.kode_pasien}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-4\">\r\n                    <FormattedMessage id=\"LABEL.PATIENT_NAME\" />\r\n                  </label>\r\n                  <div className=\"col-sm-8\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataCheckIn.nama}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-4\">\r\n                    <FormattedMessage id=\"LABEL.POLI\" />\r\n                  </label>\r\n                  <div className=\"col-sm-8\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={dataCheckIn.poli}\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <label className=\"col-sm-4\">\r\n                    <FormattedMessage id=\"LABEL.DATE_OF_VISIT\" />\r\n                  </label>\r\n                  <div className=\"col-sm-8\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={\r\n                        dataCheckIn.tgl_book\r\n                          ? window\r\n                              .moment(new Date(dataCheckIn.tgl_book))\r\n                              .format(\"DD MMM YYYY\")\r\n                          : \"\"\r\n                      }\r\n                      onChange={() => {}}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-5\">\r\n              <div className=\"col-12\">\r\n                <h6>\r\n                  <FormattedMessage id=\"LABEL.PATIENT_SCREENING\" />\r\n                </h6>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              {dataScreening.map((item, index) => {\r\n                return (\r\n                  <div key={index.toString()} className=\"col-sm-4\">\r\n                    <div className=\"form-group\">\r\n                      <label>{item.nama}</label>\r\n                      {item.datatype === 1 ||\r\n                      item.datatype === 2 ||\r\n                      item.datatype === 3 ||\r\n                      item.datatype === 4 ? (\r\n                        <input\r\n                          type={\r\n                            item.datatype === 1\r\n                              ? \"text\"\r\n                              : item.datatype === 2 || item.datatype === 3\r\n                              ? \"number\"\r\n                              : \"date\"\r\n                          }\r\n                          className=\"form-control\"\r\n                          id={(item.nama + item.id)\r\n                            .match(/[a-zA-Z0-9]+/g)\r\n                            .join(\"\")}\r\n                          disabled={\r\n                            dataScreeningLoading || item.dokter_only === 2\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <textarea\r\n                          rows=\"3\"\r\n                          id={(item.nama + item.id)\r\n                            .match(/[a-zA-Z0-9]+/g)\r\n                            .join(\"\")}\r\n                          className=\"form-control\"\r\n                          disabled={\r\n                            dataScreeningLoading || item.dokter_only === 2\r\n                          }\r\n                        ></textarea>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ScreeningPatientPage));\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport ListScreeningPage from \"./ListScreeningPage\";\r\nimport ScreeningPatientPage from \"./ScreeningPatientPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootScreening(props) {\r\n  return (\r\n    <Switch>\r\n      <Redirect\r\n        exact\r\n        from=\"/registry/screening\"\r\n        to=\"/registry/screening/list\"\r\n      />\r\n      <Route\r\n        path=\"/registry/screening/list\"\r\n        component={(props) => <ListScreeningPage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/registry/screening/patient/:patient_id/:poli/:reservasi_id\"\r\n        component={(props) => <ScreeningPatientPage {...props} />}\r\n        exact\r\n      />\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootScreening));\r\n"],"sourceRoot":""}