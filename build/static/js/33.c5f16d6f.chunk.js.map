{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","app/modules/Testimonial/_redux/CrudTestimonial.js","app/modules/Testimonial/TestimonialPage.js","app/modules/Testimonial/RootTestimonial.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","testimonialByStaf","data","axios","post","initialValues","injectIntl","connect","props","intl","useState","selectedParameterPatient","setSelectedParameterPatient","optionParameterPatient","setOptionParameterPatient","dialogRegis","setDialogRegis","loadingRegis","setLoadingRegis","suhbeader","useSubheader","useLayoutEffect","setBreadcrumbs","pathname","title","formatMessage","id","setTitle","useEffect","get","result","rows","filter","item","active_user","forEach","element","label","kode_pasien","nama","catch","MODAL","showSnackbar","Schema","Yup","shape","star","required","testimoni","formik","useFormik","validationSchema","onSubmit","values","a","setStatus","setSubmitting","pasien_id","resetForm","response","messages","changesStar","count","setFieldValue","i","window","$","removeClass","addClass","Fragment","Dialog","open","maxWidth","fullWidth","aria-labelledby","aria-describedby","autoComplete","handleSubmit","DialogTitle","DialogContent","className","style","color","fontSize","verticalAlign","onClick","touched","errors","getFieldProps","DialogActions","type","disabled","isValid","Object","keys","length","constructor","options","isDisabled","classNamePrefix","onChange","setFieldTouched","path","component","exact"],"mappings":"4GAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,OA/BZ,mC,6MCwDO,SAASC,EAAkBC,GAChC,OAAOC,IAAMC,KAAN,0BAAsCF,G,sCCxCzCG,EAAgB,GA+QPC,kBAAWC,YAAQ,KAAM,KAAdA,EA7Q1B,SAAyBC,GACvB,IAAQC,EAASD,EAATC,KACR,EAAgEC,mBAAS,IAAzE,mBAAOC,EAAP,KAAiCC,EAAjC,KACA,EAA4DF,mBAAS,IAArE,mBAAOG,EAAP,KAA+BC,EAA/B,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAA8BR,oBAAS,GAAvC,mBACMS,GADN,UACkBC,eAElBC,2BAAgB,WACdF,EAAUG,eAAe,CACvB,CACEC,SAAS,sBACTC,MAAOf,EAAKgB,cAAc,CAAEC,GAAI,oBAElC,CACEH,SAAU,wBACVC,MAAOf,EAAKgB,cAAc,CAAEC,GAAI,yBAGpCP,EAAUQ,SAASlB,EAAKgB,cAAc,CAAEC,GAAI,yBAC3C,IAmBHE,qBAjB2B,WDjCpBzB,IAAM0B,IAAN,4CCmCFtC,MAAK,SAACuC,GACLA,EAAO5B,KAAKA,KAAK6B,KAAOD,EAAO5B,KAAKA,KAAK6B,KAAKC,QAC5C,SAACC,GAAD,OAA+B,IAArBA,EAAKC,eAEjB,IAAIhC,EAAO4B,EAAO5B,KAAKA,KAAK6B,KAC5B7B,EAAKiC,SAAQ,SAACC,GACZA,EAAQjD,MAAQiD,EAAQV,GACxBU,EAAQC,MAAQD,EAAQE,YAAc,IAAMF,EAAQG,QAEtDzB,EAA0BZ,MAE3BsC,OAAM,SAACzC,GACN0C,IAAMC,aAAajC,EAAKgB,cAAc,CAAEC,GAAI,6BAGpB,IAE9B,IAAMiB,EAASC,MAAaC,MAAM,CAChCC,KAAMF,MAAaG,SACjBtC,EAAKgB,cAAc,CACjBC,GAAI,qCAGRsB,UAAWJ,MAAaG,SACtBtC,EAAKgB,cAAc,CACjBC,GAAI,uCAKJuB,EAASC,YAAU,CACvB7C,gBACA8C,iBAAkBR,EAClBS,SAAS,WAAD,4BAAE,WAAOC,EAAP,kBAAAC,EAAA,wDAAiBC,UAAjB,EAA4BC,cACpCtC,GAAgB,IACZhB,EAAOmD,GACNI,UAAY9C,EAAyBxB,MAC1Cc,EAAkBC,GACfX,MAAK,SAACuC,GACLlB,EAA4B,IAC5BI,GAAe,GACfE,GAAgB,GAChB+B,EAAOS,YACPjB,IAAMC,aACJjC,EAAKgB,cAAc,CAAEC,GAAI,8BACzB,UACA,QAGHc,OAAM,SAACzC,GAAS,IAAD,EACdmB,GAAgB,GAChBuB,IAAMC,aAAN,UAAmB3C,EAAI4D,gBAAvB,aAAmB,EAAczD,KAAK0D,aAlBlC,2CAAF,qDAAC,KAuBLC,EAAc,SAACC,GACnBb,EAAOc,cAAc,OAAQD,GAC7B,IAAK,IAAIE,EAAI,EAAGA,GAAK,EAAGA,IACtBC,OAAOC,EAAP,eAAiBF,IAAKG,YAAY,WAC9BH,GAAKF,EACPG,OAAOC,EAAP,eAAiBF,IAAKI,SAAS,OAE/BH,OAAOC,EAAP,eAAiBF,IAAKI,SAAS,QAKrC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CACEC,KAAMxD,EAENyD,SAAS,KACTC,WAAW,EACXC,kBAAgB,qBAChBC,mBAAiB,4BAEjB,0BAAMC,aAAa,MAAMxB,SAAUH,EAAO4B,cACxC,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAkBpD,GAAG,uBAEvB,kBAACqD,EAAA,EAAD,KACE,yBAAKC,UAAU,kBACb,2BAAOA,UAAU,2BACf,kBAAC,IAAD,CAAkBtD,GAAG,8BAEvB,yBAAKsD,UAAU,YACb,yBAAKA,UAAU,QACb,uBACEA,UAAU,kCACVC,MAAO,CACLC,MAAO,UACPC,SAAU,QACVC,cAAe,UAEjB1D,GAAG,QACH2D,QAAS,WACPxB,EAAY,MAGhB,uBACEmB,UAAU,kCACVC,MAAO,CACLC,MAAO,UACPC,SAAU,QACVC,cAAe,UAEjB1D,GAAG,QACH2D,QAAS,WACPxB,EAAY,MAGhB,uBACEmB,UAAU,kCACVC,MAAO,CACLC,MAAO,UACPC,SAAU,QACVC,cAAe,UAEjB1D,GAAG,QACH2D,QAAS,WACPxB,EAAY,MAGhB,uBACEmB,UAAU,kCACVC,MAAO,CACLC,MAAO,UACPC,SAAU,QACVC,cAAe,UAEjB1D,GAAG,QACH2D,QAAS,WACPxB,EAAY,MAGhB,uBACEmB,UAAU,kCACVC,MAAO,CACLC,MAAO,UACPC,SAAU,QACVC,cAAe,UAEjB1D,GAAG,QACH2D,QAAS,WACPxB,EAAY,OAIjBZ,EAAOqC,QAAQxC,MAAQG,EAAOsC,OAAOzC,MACpC,0BAAMkC,UAAU,yBACb/B,EAAOsC,OAAOzC,QAKvB,yBAAKkC,UAAU,kBACb,2BAAOA,UAAU,2BACf,kBAAC,IAAD,CAAkBtD,GAAG,mBAEvB,yBAAKsD,UAAU,YACb,4CACEjD,KAAK,IACLiD,UAAU,gBACN/B,EAAOuC,cAAc,eAE1BvC,EAAOqC,QAAQtC,WAAaC,EAAOsC,OAAOvC,WACzC,0BAAMgC,UAAU,yBACb/B,EAAOsC,OAAOvC,cAMzB,kBAACyC,EAAA,EAAD,KACE,4BACEC,KAAK,SACLL,QAAS,WACPrE,GAAe,GACfJ,EAA4B,IAC5BqC,EAAOS,aAETsB,UAAU,iBACVW,SAAU1E,GAEV,kBAAC,IAAD,CAAkBS,GAAG,kBAEvB,4BACEgE,KAAK,SACLV,UAAU,kBACVW,UACG1C,EAAO2C,SACgC,IAAvCC,OAAOC,KAAK7C,EAAOqC,SAASS,QAC3B9C,EAAOqC,QAAQU,cAAgBH,QACjC5E,GAGDA,EACC,uBAAG+D,UAAU,iCAEb,uBAAGA,UAAU,qBAEd/D,EACC,kBAAC,IAAD,CAAkBS,GAAG,kBAErB,kBAAC,IAAD,CAAkBA,GAAG,mBAM/B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,6BACE,wBAAIsD,UAAU,wCACZ,kBAAC,IAAD,CAAkBtD,GAAG,wBAGzB,yBAAKsD,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBtD,GAAG,gBACpC,uBAAGsD,UAAU,oBAGjB,kBAAC,IAAD,CACE7F,MAAOwB,EACPsF,QAASpF,EACTqF,YAAY,EACZlB,UAAU,4CACVmB,gBAAgB,eAChBC,SAAU,SAACjH,GACTyB,EAA4BzB,GAC5B6B,GAAe,GACfiC,EAAOoD,gBAAgB,QAAQ,cCrQhC/F,sBAAWC,YAAQ,KAAM,KAAdA,EAX1B,SAAyBC,GACvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8F,KAAK,wBACLC,UAAW,SAAC/F,GAAD,OAAW,kBAAC,EAAoBA,IAC3CgG,OAAK","file":"static/js/33.c5f16d6f.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import axios from \"axios\";\r\n\r\nexport function listReservationOffline() {\r\n  return axios.get(`/api/v1/reservasioff`);\r\n}\r\nexport function listReservationOnline() {\r\n  return axios.get(`/api/v1/reservasion`);\r\n}\r\nexport function listAllPatient() {\r\n  return axios.get(`/api/v1/pasien?page=1&rowsPerPage=100000`);\r\n}\r\nexport function listAllPoli() {\r\n  return axios.get(`/api/v1/poli`);\r\n}\r\nexport function getPatientById(id) {\r\n  return axios.get(`/api/v1/pasien/${id}`);\r\n}\r\nexport function regisReservation(data) {\r\n  return axios.post(`/api/v1/reservasioff`, data);\r\n}\r\nexport function listPatientPagination(params) {\r\n  return axios.get(`/api/v1/pasien${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function listReservationPagination(params) {\r\n  return axios.get(`/api/v1/reservasiall${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function cancelReservation(id, data) {\r\n  return axios.put(`/api/v1/cancelreservasi/${id}`, data);\r\n}\r\nexport function getScreeningData(id) {\r\n  return axios.get(`/api/v1/screeningform/${id}`);\r\n}\r\nexport function regisScreeningData(data) {\r\n  return axios.post(`/api/v1/submitscreen`, data);\r\n}\r\nexport function listNotYetCome() {\r\n  return axios.get(`/api/v1/reservasiuncoming`);\r\n}\r\nexport function listScreening() {\r\n  return axios.get(`/api/v1/reservasitoday`);\r\n}\r\nexport function getReservationById(id) {\r\n  return axios.get(`/api/v1/reservation/${id}`);\r\n}\r\nexport function getLabsById(medical_id) {\r\n  return axios.get(`/api/v1/labs/${medical_id}`);\r\n}\r\nexport function updateLabsById(medical_id, data) {\r\n  return axios.put(`/api/v1/labs/${medical_id}`, data);\r\n}\r\nexport function regisLabs(data) {\r\n  return axios.post(`/api/v1/labs`, data);\r\n}\r\nexport function typeScreening(id) {\r\n  return axios.get(`/api/v1/formkind/${id}`);\r\n}\r\nexport function testimonialByStaf(data) {\r\n  return axios.post(`/api/v1/testimoni/staff`, data);\r\n}\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { listAllPatient, testimonialByStaf } from \"./_redux/CrudTestimonial\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport Select from \"react-select\";\r\n\r\nconst initialValues = {};\r\n\r\nfunction TestimonialPage(props) {\r\n  const { intl } = props;\r\n  const [selectedParameterPatient, setSelectedParameterPatient] = useState({});\r\n  const [optionParameterPatient, setOptionParameterPatient] = useState([]);\r\n  const [dialogRegis, setDialogRegis] = useState(false);\r\n  const [loadingRegis, setLoadingRegis] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const suhbeader = useSubheader();\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/registry/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: \"/registry/testimonial\",\r\n        title: intl.formatMessage({ id: \"LABEL.TESTIMONIAL\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.TESTIMONIAL\" }));\r\n  }, []);\r\n\r\n  const callApiListPatient = () => {\r\n    listAllPatient()\r\n      .then((result) => {\r\n        result.data.data.rows = result.data.data.rows.filter(\r\n          (item) => item.active_user === 1\r\n        );\r\n        var data = result.data.data.rows;\r\n        data.forEach((element) => {\r\n          element.value = element.id;\r\n          element.label = element.kode_pasien + \"-\" + element.nama;\r\n        });\r\n        setOptionParameterPatient(data);\r\n      })\r\n      .catch((err) => {\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n  useEffect(callApiListPatient, []);\r\n\r\n  const Schema = Yup.object().shape({\r\n    star: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n    testimoni: Yup.string().required(\r\n      intl.formatMessage({\r\n        id: \"LABEL.VALIDATION_REQUIRED_FIELD\",\r\n      })\r\n    ),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: Schema,\r\n    onSubmit: async (values, { setStatus, setSubmitting }) => {\r\n      setLoadingRegis(true);\r\n      var data = values;\r\n      data.pasien_id = selectedParameterPatient.value;\r\n      testimonialByStaf(data)\r\n        .then((result) => {\r\n          setSelectedParameterPatient({});\r\n          setDialogRegis(false);\r\n          setLoadingRegis(false);\r\n          formik.resetForm();\r\n          MODAL.showSnackbar(\r\n            intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n            \"success\",\r\n            3000\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          setLoadingRegis(false);\r\n          MODAL.showSnackbar(err.response?.data.messages);\r\n        });\r\n    },\r\n  });\r\n\r\n  const changesStar = (count) => {\r\n    formik.setFieldValue(\"star\", count);\r\n    for (let i = 1; i <= 5; i++) {\r\n      window.$(`#star${i}`).removeClass(\"fas far\");\r\n      if (i <= count) {\r\n        window.$(`#star${i}`).addClass(\"fas\");\r\n      } else {\r\n        window.$(`#star${i}`).addClass(\"far\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        open={dialogRegis}\r\n        // keepMounted\r\n        maxWidth=\"md\"\r\n        fullWidth={true}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n          <DialogTitle>\r\n            <FormattedMessage id=\"LABEL.TESTIMONIAL\" />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">\r\n                <FormattedMessage id=\"LABEL.SATISFACTION_LAVEL\" />\r\n              </label>\r\n              <div className=\"col-sm-9\">\r\n                <div className=\"mb-3\">\r\n                  <i\r\n                    className=\"far fa-star cursor-pointer mx-2\"\r\n                    style={{\r\n                      color: \"#FFD700\",\r\n                      fontSize: \"large\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    id=\"star1\"\r\n                    onClick={() => {\r\n                      changesStar(1);\r\n                    }}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-star cursor-pointer mx-2\"\r\n                    style={{\r\n                      color: \"#FFD700\",\r\n                      fontSize: \"large\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    id=\"star2\"\r\n                    onClick={() => {\r\n                      changesStar(2);\r\n                    }}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-star cursor-pointer mx-2\"\r\n                    style={{\r\n                      color: \"#FFD700\",\r\n                      fontSize: \"large\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    id=\"star3\"\r\n                    onClick={() => {\r\n                      changesStar(3);\r\n                    }}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-star cursor-pointer mx-2\"\r\n                    style={{\r\n                      color: \"#FFD700\",\r\n                      fontSize: \"large\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    id=\"star4\"\r\n                    onClick={() => {\r\n                      changesStar(4);\r\n                    }}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-star cursor-pointer mx-2\"\r\n                    style={{\r\n                      color: \"#FFD700\",\r\n                      fontSize: \"large\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    id=\"star5\"\r\n                    onClick={() => {\r\n                      changesStar(5);\r\n                    }}\r\n                  ></i>\r\n                </div>\r\n                {formik.touched.star && formik.errors.star && (\r\n                  <span className=\"text-left text-danger\">\r\n                    {formik.errors.star}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-3 col-form-label\">\r\n                <FormattedMessage id=\"LABEL.COMMENT\" />\r\n              </label>\r\n              <div className=\"col-sm-9\">\r\n                <textarea\r\n                  rows=\"3\"\r\n                  className=\"form-control\"\r\n                  {...formik.getFieldProps(\"testimoni\")}\r\n                ></textarea>\r\n                {formik.touched.testimoni && formik.errors.testimoni && (\r\n                  <span className=\"text-left text-danger\">\r\n                    {formik.errors.testimoni}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setDialogRegis(false);\r\n                setSelectedParameterPatient({});\r\n                formik.resetForm();\r\n              }}\r\n              className=\"btn btn-danger\"\r\n              disabled={loadingRegis}\r\n            >\r\n              <FormattedMessage id=\"LABEL.CANCEL\" />\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={\r\n                !formik.isValid ||\r\n                (Object.keys(formik.touched).length === 0 &&\r\n                  formik.touched.constructor === Object) ||\r\n                loadingRegis\r\n              }\r\n            >\r\n              {loadingRegis ? (\r\n                <i className=\"fas fa-spinner fa-pulse px-2\"></i>\r\n              ) : (\r\n                <i className=\"fas fa-save ml-2\"></i>\r\n              )}\r\n              {loadingRegis ? (\r\n                <FormattedMessage id=\"LABEL.WAITING\" />\r\n              ) : (\r\n                <FormattedMessage id=\"LABEL.SAVE\" />\r\n              )}\r\n            </button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n      <Card>\r\n        <CardBody>\r\n          <div>\r\n            <h1 className=\"text-uppercase text-center mb-5 pb-5\">\r\n              <FormattedMessage id=\"LABEL.TESTIMONIAL\" />\r\n            </h1>\r\n          </div>\r\n          <div className=\"input-group mb-3\">\r\n            <div className=\"input-group-prepend\">\r\n              <span className=\"input-group-text\" id=\"basic-addon1\">\r\n                <i className=\"fas fa-qrcode\"></i>\r\n              </span>\r\n            </div>\r\n            <Select\r\n              value={selectedParameterPatient}\r\n              options={optionParameterPatient}\r\n              isDisabled={false}\r\n              className=\"form-control border-0 p-0 h-100 rounded-0\"\r\n              classNamePrefix=\"react-select\"\r\n              onChange={(value) => {\r\n                setSelectedParameterPatient(value);\r\n                setDialogRegis(true);\r\n                formik.setFieldTouched(\"star\", true);\r\n              }}\r\n            />\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(TestimonialPage));\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport TestimonialPage from \"./TestimonialPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootTestimonial(props) {\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        path=\"/registry/testimonial\"\r\n        component={(props) => <TestimonialPage {...props} />}\r\n        exact\r\n      />\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootTestimonial));\r\n"],"sourceRoot":""}