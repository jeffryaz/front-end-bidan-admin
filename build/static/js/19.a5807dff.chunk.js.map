{"version":3,"sources":["app/modules/HandlingDoctor/_redux/CrudHandlingDoctor.js","app/modules/HandlingDoctor/DetailMedicalRecord.js","app/modules/HandlingDoctor/ListMedicalRecord.js","app/modules/HandlingDoctor/ListReservationPage.js","app/modules/HandlingDoctor/ListDonePatientPage.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","app/modules/HandlingDoctor/ListDrugPage.js","app/modules/HandlingDoctor/RootHandlingDoctor.js"],"names":["getMedicineById","id","axios","get","optionParameter","value","label","injectIntl","connect","auth","props","intl","history","useHistory","useState","setLoading","loadingSave","setLoadingSave","loadingSubmit","setLoadingSubmit","data","setData","Lab","setLab","suhbeader","useSubheader","dataScreening","setDataScreening","dataMedicine","setDataMedicine","handlingFee","setHandlingFee","match","params","antrian_id","medicalRecordId","useSelector","state","shallowEqual","medicinePatient","screeningPatient","client","clientMqtt","selectedParameter","setSelectedParameter","dataMedicinePatient","a","length","waiting","Promise","resolve","reject","i","result","composite_item","qty","MODAL","showSnackbar","formatMessage","useLayoutEffect","setBreadcrumbs","pathname","title","setTitle","useEffect","medical_id","then","form","fee","console","log","setScreeningPatient","screen","labs","setMedicinePatient","resep","callApiGetMedicine","catch","err","callApiSaveMedicalRecord","forEach","element","barang_id","screenitems","val_desc","toString","trim","push","treatment_kind","detail_resep","put","saveMedicalRecord","callApiSubmitMedicalRecord","submitMedicalRecord","Fragment","className","code_reg","created_at","window","moment","Date","format","pasien","poli","options","isDisabled","classNamePrefix","onChange","to","map","item","index","key","label_kind","updated_at","upd_user","datatype","type","join","e","Object","assign","target","rows","disabled","hb","hbsag","hiv","sifilis","asam_urat","kolesterol","gol_dar","pp_test","protein_urine","ph","glukosa","nama","displayType","allowEmptyFormatting","allowLeadingZeros","allowNegative","onValueChange","idx","findIndex","floatValue","rupiah","harga","onClick","splice","style","backgroundColor","colSpan","thousandSeparator","prefix","count","countSubTotal","width","topic","publish","qos","payload","error","mqttPublish","cancelMedicalRecord","patient_id","MedicalRecord","headerTable","loading","dataHeader","hecto","TableRow","TableCell","kode_pasien","tgl_book","status","createSvgIcon","d","defaultCheckedIcon","CheckBox","defaultIcon","CheckBoxOutlineBlank","defaultIndeterminateIcon","IndeterminateCheckBox","ref","_props$checkedIcon","checkedIcon","classes","_props$color","color","_props$icon","icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","inputProps","_props$size","size","other","SwitchBase","root","concat","capitalize","checked","fontSize","withStyles","theme","palette","text","secondary","colorPrimary","primary","main","action","hoverOpacity","colorSecondary","name","order","active","filter","setErr","dataChecked","setDataChecked","handleParams","listMedicinePagination","countData","padding","barcode","unit","exact","from","path","component"],"mappings":"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","file":"static/js/19.a5807dff.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport function listPatientPagination(params) {\r\n  return axios.get(`/api/v1/pasien${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function getDataPatient(id) {\r\n  return axios.get(`/api/v1/pasien/${id}`);\r\n}\r\nexport function getMedicalRecord(medical_id) {\r\n  return axios.get(`/api/v1/medical/${medical_id}`);\r\n}\r\nexport function listMedicinePagination(params) {\r\n  return axios.get(`/api/v1/obat${params ? \"?\" + params : \"\"}`);\r\n}\r\nexport function getMedicineById(id) {\r\n  return axios.get(`/api/v1/obat/${id}`);\r\n}\r\nexport function cancelMedicalRecord(id) {\r\n  return axios.put(`/api/v1/medicalcancel/${id}`);\r\n}\r\nexport function saveMedicalRecord(medical_id, data) {\r\n  return axios.put(`/api/v1/medicalsave/${medical_id}`, data);\r\n}\r\nexport function submitMedicalRecord(medical_id, data) {\r\n  return axios.put(`/api/v1/medicalsubmit/${medical_id}`, data);\r\n}\r\nexport function listMedicalRecordDone() {\r\n  return axios.get(`/api/v1/medicaldone`);\r\n}\r\nexport function listAllReservationDoctor() {\r\n  return axios.get(`/api/v1/medicalallres`);\r\n}\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n} from \"../../../_metronic/_partials/controls\";\r\nimport { getMedicalRecord } from \"./_redux/CrudHandlingDoctor\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport { toAbsoluteUrl } from \"../../../_metronic/_helpers\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport {\r\n  getMedicineById,\r\n  cancelMedicalRecord,\r\n  saveMedicalRecord,\r\n  submitMedicalRecord,\r\n} from \".//_redux/CrudHandlingDoctor\";\r\nimport { publish } from \"../../../redux/MqttOptions\";\r\nimport { rupiah } from \"../../components/currency\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport * as auth from \"../Auth/_redux/ActionAuth\";\r\nimport Select from \"react-select\";\r\n\r\nconst optionParameter = [\r\n  { value: \"1\", label: \"Rawat Inap\" },\r\n  { value: \"2\", label: \"Rawat Jalan\" },\r\n];\r\n\r\nfunction DetailMedicalRecord(props) {\r\n  const { intl } = props;\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadingSave, setLoadingSave] = useState(false);\r\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\r\n  const [data, setData] = useState({});\r\n  const [Lab, setLab] = useState({});\r\n  const [err, setErr] = useState(false);\r\n  const suhbeader = useSubheader();\r\n  const [dataScreening, setDataScreening] = useState([]);\r\n  const [dataMedicine, setDataMedicine] = useState([]);\r\n  const [handlingFee, setHandlingFee] = useState(0);\r\n  const id = props.match.params.id;\r\n  const antrian_id = props.match.params.antrian_id;\r\n  const medicalRecordId = props.match.params.medicalRecordId;\r\n  let { medicinePatient, screeningPatient } = useSelector(\r\n    (state) => state.auth,\r\n    shallowEqual\r\n  );\r\n  const client = useSelector(\r\n    ({ clientMqtt }) => clientMqtt.client,\r\n    shallowEqual\r\n  );\r\n  const [selectedParameter, setSelectedParameter] = useState({\r\n    value: \"2\",\r\n    label: \"Rawat Jalan\",\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/doctor/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/process`,\r\n        title: intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD\" }));\r\n  }, []);\r\n\r\n  const callApiGetMedical = () => {\r\n    setLoading(true);\r\n    getMedicalRecord(medicalRecordId)\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data.form[0]);\r\n        setHandlingFee(result.data.data.form[0].fee || 0);\r\n        console.log(\"result\", result);\r\n        if (\r\n          (screeningPatient && screeningPatient.length === 0) ||\r\n          !screeningPatient\r\n        ) {\r\n          props.setScreeningPatient(\r\n            result.data.data.screen ? result.data.data.screen : []\r\n          );\r\n          setDataScreening(result.data.data.screen);\r\n        } else {\r\n          setDataScreening(screeningPatient);\r\n        }\r\n        setLab(result.data.data.labs ? result.data.data.labs : {});\r\n        if (\r\n          (medicinePatient && medicinePatient.length === 0) ||\r\n          !medicinePatient\r\n        ) {\r\n          // setDataMedicine(result.data.data.resep ? result.data.data.resep : []);\r\n          props.setMedicinePatient(\r\n            result.data.data.resep ? result.data.data.resep : []\r\n          );\r\n          callApiGetMedicine(\r\n            result.data.data.resep ? result.data.data.resep : []\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiGetMedical, []);\r\n\r\n  async function callApiGetMedicine(dataMedicinePatient) {\r\n    if (dataMedicinePatient && dataMedicinePatient.length > 0) {\r\n      var data = dataMedicinePatient;\r\n      var waiting = new Promise(async (resolve, reject) => {\r\n        for (let i = 0; i < data.length; i++) {\r\n          try {\r\n            var result = await getMedicineById(data[i].id);\r\n            data[i].composite_item = result.data.data.composite_item;\r\n            data[i].qty = data[i].qty ? data[i].qty : 1;\r\n            if (i === data.length - 1) resolve();\r\n          } catch (error) {\r\n            MODAL.showSnackbar(\r\n              intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" })\r\n            );\r\n            if (i === data.length - 1) resolve();\r\n          }\r\n        }\r\n      });\r\n      await waiting;\r\n      setDataMedicine(data);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function callApiGetMedicine() {\r\n      if (medicinePatient && medicinePatient.length > 0) {\r\n        var data = medicinePatient;\r\n        var waiting = new Promise(async (resolve, reject) => {\r\n          for (let i = 0; i < data.length; i++) {\r\n            try {\r\n              var result = await getMedicineById(data[i].id);\r\n              data[i].composite_item = result.data.data.composite_item;\r\n              data[i].qty = data[i].qty ? data[i].qty : 1;\r\n              if (i === data.length - 1) resolve();\r\n            } catch (error) {\r\n              MODAL.showSnackbar(\r\n                intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" })\r\n              );\r\n              if (i === data.length - 1) resolve();\r\n            }\r\n          }\r\n        });\r\n        await waiting;\r\n        setDataMedicine(data);\r\n      }\r\n    }\r\n    callApiGetMedicine();\r\n  }, []);\r\n\r\n  const mqttPublish = () => {\r\n    if (client) {\r\n      const { topic, qos, payload } = publish;\r\n      client.publish(topic, payload, { qos }, (error) => {\r\n        if (error) {\r\n          console.log(\"Publish error: \", error);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const countSubTotal = (data) => {\r\n    var count = 0;\r\n    data.map((item) => {\r\n      count += item.harga * item.qty;\r\n    });\r\n    return count;\r\n  };\r\n\r\n  const callApiSaveMedicalRecord = () => {\r\n    setLoadingSave(true);\r\n    dataMedicine.forEach((element) => (element.barang_id = element.id));\r\n    var screenitems = [];\r\n    for (let i = 0; i < dataScreening.length; i++) {\r\n      if (\r\n        dataScreening[i].val_desc &&\r\n        dataScreening[i].val_desc.toString().trim().length != 0\r\n      )\r\n        screenitems.push(dataScreening[i]);\r\n    }\r\n    var data = {\r\n      treatment_kind: selectedParameter.value,\r\n      screenitems,\r\n      detail_resep: dataMedicine,\r\n      fee: handlingFee,\r\n    };\r\n    saveMedicalRecord(medicalRecordId, data)\r\n      .then((result) => {\r\n        setLoadingSave(false);\r\n        MODAL.showSnackbar(\r\n          intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n          \"success\"\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        setLoadingSave(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  const callApiSubmitMedicalRecord = () => {\r\n    setLoadingSubmit(true);\r\n    dataMedicine.forEach((element) => (element.barang_id = element.id));\r\n    var screenitems = [];\r\n    for (let i = 0; i < dataScreening.length; i++) {\r\n      if (\r\n        dataScreening[i].val_desc &&\r\n        dataScreening[i].val_desc.toString().trim().length != 0\r\n      )\r\n        screenitems.push(dataScreening[i]);\r\n    }\r\n    var data = {\r\n      treatment_kind: selectedParameter.value,\r\n      screenitems,\r\n      detail_resep: dataMedicine,\r\n      fee: handlingFee,\r\n    };\r\n    submitMedicalRecord(medicalRecordId, data)\r\n      .then((result) => {\r\n        setLoadingSubmit(false);\r\n        props.setMedicinePatient([]);\r\n        props.setScreeningPatient([]);\r\n        history.push(`/doctor/dashboard`);\r\n        MODAL.showSnackbar(\r\n          intl.formatMessage({ id: \"LABEL.UPDATE_DATA_SUCCESS\" }),\r\n          \"success\"\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        setLoadingSubmit(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card card-custom wave wave-animate-fast wave-primary gutter-b\">\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex align-items-center\">\r\n                <div className=\"symbol symbol-40 symbol-light-danger mr-5\">\r\n                  <span className=\"symbol-label\">\r\n                    <i className=\"fas fa-hospital-user h-75 align-self-end font-size-h1\"></i>\r\n                  </span>\r\n                </div>\r\n                <div className=\"d-flex flex-column flex-grow-1 font-weight-bold\">\r\n                  <h4 className=\"text-dark mb-1\">\r\n                    Nomor Kunjungan: {data.code_reg}\r\n                  </h4>\r\n                  <span className=\"text-muted\">\r\n                    {data.created_at\r\n                      ? window\r\n                          .moment(new Date(data.created_at))\r\n                          .format(\"DD MMM YYYY\")\r\n                      : \"\"}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card card-custom wave wave-animate-fast wave-primary gutter-b\">\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex align-items-center\">\r\n                <div className=\"symbol symbol-40 symbol-light-danger mr-5\">\r\n                  <span className=\"symbol-label\">\r\n                    <i className=\"fas fa-user-nurse h-75 align-self-end font-size-h1\"></i>\r\n                  </span>\r\n                </div>\r\n                <div className=\"d-flex flex-column flex-grow-1 font-weight-bold\">\r\n                  <h4 className=\"text-dark mb-1\">{data.pasien}</h4>\r\n                  <span className=\"text-muted\">{data.poli}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card card-custom gutter-b\">\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex align-items-center\">\r\n                <div className=\"symbol symbol-40 symbol-light-danger mr-5\">\r\n                  <span className=\"symbol-label\">\r\n                    <i className=\"fas fa-user-md h-75 align-self-end font-size-h1\"></i>\r\n                  </span>\r\n                </div>\r\n                <div className=\"d-flex flex-column flex-grow-1 font-weight-bold\">\r\n                  <Select\r\n                    value={selectedParameter}\r\n                    options={optionParameter}\r\n                    isDisabled={false}\r\n                    className=\"form-control form-control-sm border-0 p-0 h-100\"\r\n                    classNamePrefix=\"react-select\"\r\n                    onChange={(value) => {\r\n                      setSelectedParameter(value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <Card>\r\n            <CardHeader title=\"Screening Data\">\r\n              <CardHeaderToolbar>\r\n                <Link\r\n                  to={`/doctor/handling-page/process/${id}/${antrian_id}/${medicalRecordId}/list`}\r\n                  className=\"btn btn-primary\"\r\n                >\r\n                  <i className=\"fas fa-history mx-1\"></i>\r\n                  <FormattedMessage id=\"LABEL.HISTORY\" />\r\n                </Link>\r\n              </CardHeaderToolbar>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"row\">\r\n                {dataScreening.map((item, index) => {\r\n                  return (\r\n                    <div key={index.toString()} className=\"col-md-4\">\r\n                      <div className=\"form-group\">\r\n                        <span className=\"d-flex justify-content-between\">\r\n                          <label>{item.label_kind}</label>\r\n                          <small\r\n                            id=\"emailHelp\"\r\n                            className=\"form-text text-muted\"\r\n                          >\r\n                            {item.updated_at\r\n                              ? window\r\n                                  .moment(new Date(item.updated_at))\r\n                                  .format(\"DD MMM YYYY HH:mm:ss\")\r\n                              : \"\"}\r\n                            <span className=\"text-uppercase\">\r\n                              {item.upd_user || \"\"}\r\n                            </span>\r\n                          </small>\r\n                        </span>\r\n                        {item.datatype === 1 ||\r\n                        item.datatype === 2 ||\r\n                        item.datatype === 3 ||\r\n                        item.datatype === 4 ? (\r\n                          <input\r\n                            type={\r\n                              item.datatype === 1\r\n                                ? \"text\"\r\n                                : item.datatype === 2 || item.datatype === 3\r\n                                ? \"number\"\r\n                                : \"date\"\r\n                            }\r\n                            className=\"form-control\"\r\n                            id={(item.label_kind + item.id)\r\n                              .match(/[a-zA-Z0-9]+/g)\r\n                              .join(\"\")}\r\n                            value={item.val_desc || \"\"}\r\n                            onChange={(e) => {\r\n                              var data = Object.assign([], dataScreening);\r\n                              data[index].val_desc = e.target.value;\r\n                              setDataScreening(data);\r\n                              props.setScreeningPatient(data);\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <textarea\r\n                            rows=\"3\"\r\n                            className=\"form-control\"\r\n                            id={(item.label_kind + item.id)\r\n                              .match(/[a-zA-Z0-9]+/g)\r\n                              .join(\"\")}\r\n                            value={item.val_desc}\r\n                            onChange={(e) => {\r\n                              var data = Object.assign([], dataScreening);\r\n                              data[index].val_desc = e.target.value;\r\n                              setDataScreening(data);\r\n                              props.setScreeningPatient(data);\r\n                            }}\r\n                          ></textarea>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              {/* <div className=\"row\">\r\n                <div className=\"col-12\">Diagnosa Dokter</div>\r\n                <div className=\"col-12\">\r\n                  <div className=\"form-group\">\r\n                    <textarea rows=\"3\" className=\"form-control\"></textarea>\r\n                  </div>\r\n                </div>\r\n              </div> */}\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <Card>\r\n            <CardHeader title=\"Labs\"></CardHeader>\r\n            <CardBody>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Hemoglobin (HB)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.hb}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Hepatitis B Surface Antigen (HBsAg)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.hbsag}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Human Immunodeficiency Virus (HIV)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.hiv}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Raja Singa (Sifilis)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.sifilis}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Asam Urat</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.asam_urat}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Kolestrol</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.kolesterol}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Gelongan Darah</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.gol_dar}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Plano Test (PP Test)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.pp_test}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Protein Urine</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.protein_urine}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>PH</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.ph}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <div className=\"form-group\">\r\n                    <label>Gula Darah (Glucose)</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      disabled={true}\r\n                      value={Lab?.glukosa}\r\n                      onChange={() => {}}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <Card>\r\n            <CardHeader title=\"Resep Yang Diberikan\">\r\n              <CardHeaderToolbar>\r\n                <Link\r\n                  to={`/doctor/handling-page/process/${id}/${antrian_id}/${medicalRecordId}/medicine-list`}\r\n                  className=\"btn btn-primary\"\r\n                >\r\n                  <i className=\"fas fa-prescription-bottle-alt mx-1\"></i>\r\n                  Penambahan Obat\r\n                </Link>\r\n              </CardHeaderToolbar>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Nama Obat</th>\r\n                    <th>Unit</th>\r\n                    <th>Harga</th>\r\n                    <th>Sub Total</th>\r\n                    <th>Aksi</th>\r\n                  </tr>\r\n                </thead>\r\n                {dataMedicine.map((item, index) => {\r\n                  return (\r\n                    <tbody key={index.toString()}>\r\n                      <tr>\r\n                        <td>{item.nama}</td>\r\n                        <td>\r\n                          <NumberFormat\r\n                            value={item.qty}\r\n                            displayType=\"input\"\r\n                            className=\"form-control\"\r\n                            allowEmptyFormatting={true}\r\n                            allowLeadingZeros={false}\r\n                            allowNegative={false}\r\n                            onValueChange={(e) => {\r\n                              var data = Object.assign([], dataMedicine);\r\n                              var idx = data.findIndex(\r\n                                (value) => value.id === item.id\r\n                              );\r\n                              data[idx].qty = e.floatValue ? e.floatValue : 0;\r\n                              setDataMedicine(data);\r\n                            }}\r\n                          />\r\n                        </td>\r\n                        <td>{rupiah(item.harga)}</td>\r\n                        <td>{rupiah(item.harga * item.qty)}</td>\r\n                        <td>\r\n                          <i\r\n                            className=\"far fa-trash-alt text-danger cursor-pointer\"\r\n                            onClick={() => {\r\n                              var data = Object.assign([], dataMedicine);\r\n                              var idx = data.findIndex(\r\n                                (value) => value.id === item.id\r\n                              );\r\n                              data.splice(idx, 1);\r\n                              setDataMedicine(data);\r\n                              props.setMedicinePatient(data);\r\n                            }}\r\n                          ></i>\r\n                        </td>\r\n                      </tr>\r\n                      {item.composite_item &&\r\n                        item.composite_item.map((value, idx) => {\r\n                          return (\r\n                            <tr\r\n                              key={idx.toString()}\r\n                              style={{ backgroundColor: \"#F3F6F9\" }}\r\n                            >\r\n                              <td className=\"pl-10\">{value.nama}</td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"number\"\r\n                                  className=\"form-control\"\r\n                                  value={item.qty}\r\n                                  onChange={() => {}}\r\n                                  disabled\r\n                                />\r\n                              </td>\r\n                              <td>{rupiah(0)}</td>\r\n                              <td>{rupiah(0)}</td>\r\n                              <td></td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                    </tbody>\r\n                  );\r\n                })}\r\n                <tbody>\r\n                  <tr>\r\n                    <th colSpan=\"2\"></th>\r\n                    <th>Biaya Penanganan</th>\r\n                    <th colSpan=\"2\">\r\n                      <NumberFormat\r\n                        value={handlingFee}\r\n                        displayType=\"input\"\r\n                        className=\"form-control\"\r\n                        allowEmptyFormatting={true}\r\n                        allowLeadingZeros={true}\r\n                        thousandSeparator={true}\r\n                        allowNegative={false}\r\n                        prefix={\"Rp \"}\r\n                        onValueChange={(e) => {\r\n                          setHandlingFee(e.floatValue ? e.floatValue : 0);\r\n                        }}\r\n                      />\r\n                    </th>\r\n                  </tr>\r\n                  <tr>\r\n                    <th colSpan=\"2\"></th>\r\n                    <th>Total</th>\r\n                    <td colSpan=\"2\">\r\n                      {rupiah(handlingFee + countSubTotal(dataMedicine))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n      <div className=\"toolbar-custom scrolltop\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger btn-sm my-2\"\r\n          style={{ width: 60 }}\r\n          disabled={loadingSave || loadingSubmit}\r\n          onClick={() => {\r\n            mqttPublish();\r\n            cancelMedicalRecord(data.id).catch((err) => {\r\n              MODAL.showSnackbar(\r\n                intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" })\r\n              );\r\n            });\r\n            props.setMedicinePatient([]);\r\n            props.setScreeningPatient([]);\r\n            history.push(`/doctor/dashboard`);\r\n          }}\r\n        >\r\n          <i className=\"fas fa-times-circle d-block p-0\"></i>\r\n          <span className=\"font-size-xs\">Cancel</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-success btn-sm my-2\"\r\n          style={{ width: 60 }}\r\n          disabled={loadingSave || loadingSubmit}\r\n          onClick={() => {\r\n            callApiSaveMedicalRecord();\r\n          }}\r\n        >\r\n          {loadingSave ? (\r\n            <i className=\"fas fa-spinner fa-pulse p-2\"></i>\r\n          ) : (\r\n            <i className=\"fas fa-save d-block p-0\"></i>\r\n          )}\r\n\r\n          <span className=\"font-size-xs\">Save</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-sm my-2\"\r\n          style={{ width: 60 }}\r\n          disabled={loadingSave || loadingSubmit}\r\n          onClick={() => {\r\n            callApiSubmitMedicalRecord();\r\n          }}\r\n        >\r\n          {loadingSubmit ? (\r\n            <i className=\"fas fa-spinner fa-pulse p-2\"></i>\r\n          ) : (\r\n            <i className=\"fas fa-check d-block p-0\"></i>\r\n          )}\r\n          <span className=\"font-size-xs\">Submit</span>\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, auth.actions)(DetailMedicalRecord));\r\n","import React, { useLayoutEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport MedicalRecord from \"../Patient/patientPages/MedicalRecord\";\r\n\r\nfunction ListMedicalRecord(props) {\r\n  const { intl } = props;\r\n  const suhbeader = useSubheader();\r\n  const patient_id = props.match.params.id;\r\n  const antrian_id = props.match.params.antrian_id;\r\n  const medicalRecordId = props.match.params.medicalRecordId;\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/doctor/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}`,\r\n        title: intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}/list`,\r\n        title: intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD_LIST\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD_LIST\" }));\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MedicalRecord {...props} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListMedicalRecord));\r\n","import React, { useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport TableOnly from \"../../components/tableCustomV1/tableOnly\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { listAllReservationDoctor } from \"./_redux/CrudHandlingDoctor\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.PATIENT_CODE\",\r\n  },\r\n  {\r\n    title: \"LABEL.REGISTRATION_NO\",\r\n  },\r\n  {\r\n    title: \"LABEL.PATIENT_NAME\",\r\n  },\r\n  {\r\n    title: \"LABEL.DATE_OF_VISIT\",\r\n  },\r\n  {\r\n    title: \"LABEL.POLI\",\r\n  },\r\n  {\r\n    title: \"LABEL.STATUS\",\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n  },\r\n];\r\n\r\nfunction ListReservationPage(props) {\r\n  const { intl } = props;\r\n  const suhbeader = useSubheader();\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/doctor/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/list-reservation`,\r\n        title: intl.formatMessage({ id: \"LABEL.RESERVATION_LIST\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.RESERVATION_LIST\" }));\r\n  }, []);\r\n\r\n  const callApiListAllReservation = () => {\r\n    setLoading(true);\r\n    listAllReservationDoctor()\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListAllReservation, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <TableOnly dataHeader={headerTable} loading={loading} hecto={10}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{item.kode_pasien}</TableCell>\r\n                  <TableCell>{item.code_reg}</TableCell>\r\n                  <TableCell>{item.nama}</TableCell>\r\n                  <TableCell>{item.tgl_book}</TableCell>\r\n                  <TableCell>{item.poli}</TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" ? (\r\n                      <FormattedMessage id=\"LABEL.BOOKING\" />\r\n                    ) : item.status === \"2\" ? (\r\n                      <FormattedMessage id=\"LABEL.CANCELED\" />\r\n                    ) : item.status === \"3\" ? (\r\n                      <FormattedMessage id=\"LABEL.CHECKIN_SCREENING\" />\r\n                    ) : item.status === \"4\" ? (\r\n                      <FormattedMessage id=\"LABEL.POLI_PROCESS\" />\r\n                    ) : item.status === \"5\" ? (\r\n                      <FormattedMessage id=\"LABEL.PHARMACIST\" />\r\n                    ) : item.status === \"6\" ? (\r\n                      <FormattedMessage id=\"LABEL.PAYMENT\" />\r\n                    ) : (\r\n                      <FormattedMessage id=\"LABEL.FINISH\" />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {/* {item.status !== \"2\" && (\r\n                      <ButtonAction\r\n                        data={item}\r\n                        handleAction={handleAction}\r\n                        ops={data_ops}\r\n                      />\r\n                    )} */}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableOnly>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListReservationPage));\r\n","import React, { useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl, FormattedMessage } from \"react-intl\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { Card, CardBody } from \"../../../_metronic/_partials/controls\";\r\nimport TableOnly from \"../../components/tableCustomV1/tableOnly\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { listMedicalRecordDone } from \"./_redux/CrudHandlingDoctor\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.PATIENT_CODE\",\r\n  },\r\n  {\r\n    title: \"LABEL.REGISTRATION_NO\",\r\n  },\r\n  {\r\n    title: \"LABEL.PATIENT_NAME\",\r\n  },\r\n  {\r\n    title: \"LABEL.DATE_OF_VISIT\",\r\n  },\r\n  {\r\n    title: \"LABEL.POLI\",\r\n  },\r\n  {\r\n    title: \"LABEL.STATUS\",\r\n  },\r\n  {\r\n    title: \"LABEL.TABLE_HEADER.ACTION\",\r\n  },\r\n];\r\n\r\nfunction ListDonePatientPage(props) {\r\n  const { intl } = props;\r\n  const suhbeader = useSubheader();\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/doctor/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/done`,\r\n        title: intl.formatMessage({ id: \"LABEL.DONE\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.DONE\" }));\r\n  }, []);\r\n\r\n  const callApiListMedicalRecordDone = () => {\r\n    setLoading(true);\r\n    listMedicalRecordDone()\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData(result.data.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n\r\n  useEffect(callApiListMedicalRecordDone, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardBody>\r\n          <TableOnly dataHeader={headerTable} loading={loading} hecto={10}>\r\n            {data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell>{item.kode_pasien}</TableCell>\r\n                  <TableCell>{item.code_reg}</TableCell>\r\n                  <TableCell>{item.nama}</TableCell>\r\n                  <TableCell>{item.tgl_book}</TableCell>\r\n                  <TableCell>{item.poli}</TableCell>\r\n                  <TableCell>\r\n                    {item.status === \"1\" ? (\r\n                      <FormattedMessage id=\"LABEL.BOOKING\" />\r\n                    ) : item.status === \"2\" ? (\r\n                      <FormattedMessage id=\"LABEL.CANCELED\" />\r\n                    ) : item.status === \"3\" ? (\r\n                      <FormattedMessage id=\"LABEL.CHECKIN_SCREENING\" />\r\n                    ) : item.status === \"4\" ? (\r\n                      <FormattedMessage id=\"LABEL.POLI_PROCESS\" />\r\n                    ) : item.status === \"5\" ? (\r\n                      <FormattedMessage id=\"LABEL.PHARMACIST\" />\r\n                    ) : item.status === \"6\" ? (\r\n                      <FormattedMessage id=\"LABEL.PAYMENT\" />\r\n                    ) : (\r\n                      <FormattedMessage id=\"LABEL.FINISH\" />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {/* {item.status !== \"2\" && (\r\n                      <ButtonAction\r\n                        data={item}\r\n                        handleAction={handleAction}\r\n                        ops={data_ops}\r\n                      />\r\n                    )} */}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableOnly>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, null)(ListDonePatientPage));\r\n","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { connect, useSelector, shallowEqual } from \"react-redux\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { useSubheader } from \"../../../_metronic/layout\";\r\nimport { listMedicinePagination } from \"./_redux/CrudHandlingDoctor\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderToolbar,\r\n} from \"../../../_metronic/_partials/controls\";\r\nimport { TableRow, TableCell, Checkbox } from \"@material-ui/core\";\r\nimport Tables from \"../../components/tableCustomV1/table\";\r\nimport { MODAL } from \"../../../service/modalSession/ModalService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as auth from \"../Auth/_redux/ActionAuth\";\r\nimport { rupiah } from \"../../components/currency\";\r\n\r\nconst headerTable = [\r\n  {\r\n    title: \"LABEL.CHECK\",\r\n    name: \"check\",\r\n    order: {\r\n      active: false,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: false,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.DRUG_CODE\",\r\n    name: \"barcode\",\r\n    order: {\r\n      active: true,\r\n      status: true,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.MEDICINE_NAME\",\r\n    name: \"nama\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"LABEL.UNIT\",\r\n  //   name: \"kind\",\r\n  //   order: {\r\n  //     active: true,\r\n  //     status: false,\r\n  //   },\r\n  //   filter: {\r\n  //     active: true,\r\n  //     type: \"text\",\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"LABEL.UNIT_TYPE\",\r\n    name: \"unit\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"text\",\r\n    },\r\n  },\r\n  {\r\n    title: \"LABEL.UNIT_PRICE\",\r\n    name: \"harga\",\r\n    order: {\r\n      active: true,\r\n      status: false,\r\n    },\r\n    filter: {\r\n      active: true,\r\n      type: \"number\",\r\n    },\r\n  },\r\n];\r\n\r\nfunction ListDrugPage(props) {\r\n  const { intl } = props;\r\n  const suhbeader = useSubheader();\r\n  const patient_id = props.match.params.id;\r\n  const antrian_id = props.match.params.antrian_id;\r\n  const medicalRecordId = props.match.params.medicalRecordId;\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState({\r\n    data: [],\r\n    count: 0,\r\n  });\r\n  const [err, setErr] = useState(false);\r\n  const [dataChecked, setDataChecked] = useState([]);\r\n  const history = useHistory();\r\n  let medicinePatient = useSelector(\r\n    (state) => state.auth.medicinePatient,\r\n    shallowEqual\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    suhbeader.setBreadcrumbs([\r\n      {\r\n        pathname: `/doctor/dashboard`,\r\n        title: intl.formatMessage({ id: \"MENU.DASHBOARD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}`,\r\n        title: intl.formatMessage({ id: \"LABEL.MEDICAL_RECORD\" }),\r\n      },\r\n      {\r\n        pathname: `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}/medicine-list`,\r\n        title: intl.formatMessage({ id: \"LABEL.MEDICINE_LIST\" }),\r\n      },\r\n    ]);\r\n    suhbeader.setTitle(intl.formatMessage({ id: \"LABEL.MEDICINE_LIST\" }));\r\n  }, []);\r\n\r\n  const requestApi = (params) => {\r\n    setLoading(true);\r\n    setData({\r\n      ...data,\r\n      count: 0,\r\n      data: [],\r\n    });\r\n    setErr(false);\r\n    listMedicinePagination(params)\r\n      .then((result) => {\r\n        setLoading(false);\r\n        setData({\r\n          ...data,\r\n          count: 0,\r\n          data: result.data.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setErr(true);\r\n        setLoading(false);\r\n        MODAL.showSnackbar(intl.formatMessage({ id: \"REQ.REQUEST_FAILED\" }));\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    if (medicinePatient) setDataChecked(medicinePatient);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <CardHeader title=\"\">\r\n          <CardHeaderToolbar>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger mx-1\"\r\n              onClick={() => {\r\n                history.push(\r\n                  `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}`\r\n                );\r\n              }}\r\n            >\r\n              <i className=\"fas fa-times\"></i>\r\n              <FormattedMessage id=\"LABEL.CANCEL\" />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary mx-1\"\r\n              onClick={() => {\r\n                props.setMedicinePatient(dataChecked);\r\n                history.push(\r\n                  `/doctor/handling-page/process/${patient_id}/${antrian_id}/${medicalRecordId}`\r\n                );\r\n              }}\r\n            >\r\n              <i className=\"fas fa-save\"></i>\r\n              <FormattedMessage id=\"LABEL.SAVE\" />\r\n            </button>\r\n          </CardHeaderToolbar>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Tables\r\n            dataHeader={headerTable}\r\n            handleParams={requestApi}\r\n            loading={loading}\r\n            err={err}\r\n            countData={data.count}\r\n            hecto={10}\r\n          >\r\n            {data.data.map((item, index) => {\r\n              return (\r\n                <TableRow key={index.toString()}>\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      indeterminate={false}\r\n                      checked={\r\n                        dataChecked.findIndex(\r\n                          (value) => value.id === item.id\r\n                        ) !== -1\r\n                      }\r\n                      onChange={(e) => {\r\n                        var data = Object.assign([], dataChecked);\r\n                        if (e.target.checked) {\r\n                          data.push(item);\r\n                        } else {\r\n                          var idx = data.findIndex(\r\n                            (value) => value.id === item.id\r\n                          );\r\n                          data.splice(idx, 1);\r\n                        }\r\n                        setDataChecked(data);\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>{item?.barcode}</TableCell>\r\n                  <TableCell>{item?.nama}</TableCell>\r\n                  {/* <TableCell>{item?.kind}</TableCell> */}\r\n                  <TableCell>{item?.unit}</TableCell>\r\n                  <TableCell>{rupiah(item?.harga || 0)}</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </Tables>\r\n        </CardBody>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default injectIntl(connect(null, auth.actions)(ListDrugPage));\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport DetailMedicalRecord from \"./DetailMedicalRecord\";\r\nimport DetailMedicalRecords from \"../Patient/patientPages/DetailMedicalRecord\";\r\nimport ListMedicalRecord from \"./ListMedicalRecord\";\r\nimport ListReservationPage from \"./ListReservationPage\";\r\nimport ListDonePatientPage from \"./ListDonePatientPage\";\r\nimport ListDrugPage from \"./ListDrugPage\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RootHandlingDoctor(props) {\r\n  return (\r\n    <Switch>\r\n      <Redirect exact from=\"/doctor/handling-page\" to=\"/doctor/dashboard\" />\r\n      <Route\r\n        path=\"/doctor/handling-page/process/:id/:antrian_id/:medicalRecordId/list/:medicalRecordIdPass\"\r\n        component={(props) => <DetailMedicalRecords {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/doctor/handling-page/process/:id/:antrian_id/:medicalRecordId/list\"\r\n        component={(props) => <ListMedicalRecord {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/doctor/handling-page/process/:id/:antrian_id/:medicalRecordId/medicine-list\"\r\n        component={(props) => <ListDrugPage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/doctor/handling-page/process/:id/:antrian_id/:medicalRecordId\"\r\n        component={(props) => <DetailMedicalRecord {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/doctor/handling-page/list-reservation\"\r\n        component={(props) => <ListReservationPage {...props} />}\r\n        exact\r\n      />\r\n      <Route\r\n        path=\"/doctor/handling-page/done\"\r\n        component={(props) => <ListDonePatientPage {...props} />}\r\n        exact\r\n      />\r\n      {/* <Route\r\n        path=\"/registry/regis-page/contract/:contract\"\r\n        component={(props) => <ListTermContract {...props} />}\r\n        exact={true}\r\n      />\r\n      <Route\r\n        path=\"/registry/regis-page/contract\"\r\n        component={DashboardListContract}\r\n      />\r\n      <Route path=\"/registry/regis-page/spt/:id\" component={ItemSpt} />\r\n      <Route path=\"/registry/regis-page/spt\" component={DashboardListSpt} />\r\n      <Route\r\n        path=\"/registry/regis-page/mismatch\"\r\n        component={DashboardListMismatch}\r\n      />\r\n      <Route path=\"/registry/regis-page/bkb\" component={DashboardListBkb} />\r\n      <Route path=\"/registry/regis-page/dashboard\" component={Dashboard} />\r\n      <Route\r\n        path=\"/registry/regis-page/invoice_document\"\r\n        component={DashboardListInvoice}\r\n      /> */}\r\n    </Switch>\r\n  );\r\n}\r\nexport default injectIntl(connect(null, null)(RootHandlingDoctor));\r\n"],"sourceRoot":""}